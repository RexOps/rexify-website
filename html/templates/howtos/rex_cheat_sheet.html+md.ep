# Rex 备忘录

最常用命令的简易备忘录。

## 执行一个命令然后解析其输出

### run($command, %options)

运行远程命令并返回输出。

#### 参数(Options)

* cwd - 命令的工作目录。
* only_if - 仅当条件成功时执行命令。
* unless - 仅当条件不成功时执行命令。
* only_notified - 命令入队列，直到被通知触发时执行。
* env - 设置命令的环境变量。
* timeout - 尝试中断命令的超时时间。
* auto_die - 如果命令返回非零退出值，自动 die。
* command - 要执行的命令。
* creates - 如果这个参数指定的文件存在，命令不会执行。

##### 如果文件不存在才执行命令的示例
<pre><code class="perl">run "/tmp/install_service.sh",
  creates => "/opt/myservice/conf.xml";
</code></pre>

##### 运行命令获取输出的示例
<pre><code class="perl">my @output_lines = run "df -h";</code></pre>


## 安装和配置一个服务

配置管理里最常用的函数就是安装/管理服务和配置文件。Rex 里，你可以用 *file*, *pkg* 和 *service* 函数。

### file($remote_file, %options)
管理远端系统上的文件。

#### 参数(Options)

* ensure - 定义文件的状态。可选值有：*present*, *absent*, *directory*。
* source - 要上传到远端服务器的本地文件地址。
* content - 直接设置内容。可以跟 *template()* 函数一起用。
* owner - 文件属主。
* group - 文件属组。
* mode - 文件的文件系统权限。
* no_overwrite - 如果设置为 *TRUE*，当文件已存在的时候，就不覆盖了。
* on_change - 当文件状态改变的时候调用的回调函数。(比如当文件内容发生了修改)

<pre><code class="perl">file "/etc/ntpd.conf",
  ensure => "present",
  source => "files/ntpd.conf",
  owner  => "root",
  group  => "root",
  mode   => 644,
  on_change => sub {
    service ntpd => "restart";
  };
</code></pre>

### pkg($name, %options)
在远端系统上安装一个软件包。

#### 参数(Options)

* ensure - 定义软件包的状态。可选值有：*latest*, *present*, *absent* 或者具体的版本号。
* on_change - 软件包状态改变时调用的回调函数。(比如软件包升级时)

<pre><code class="perl">pkg "ntpd",
  ensure => "latest",
  on_change => sub {
    service ntpd => "restart";
  };</code></pre>

### service
管理服务的状态

这个函数可以作为一个资源来调用，也可以作为普通的函数，直接停止/启动/重启……指定服务。

#### 参数(Options) (for calling as a resource)

* ensure - 定义服务状态。可选值有 *started*, *stopped*。
* start - 自定义启动服务的命令。
* stop - 自定义停止服务的命令。
* status - 自定义获取服务状态的命令。
* restart - 自定义重启服务的命令。
* reload - 自定义重载服务的命令。

##### 作为资源调用的示例

<pre><code class="perl">service "nptd",
  ensure => "started";
</code></pre>

#### 作为函数调用的示例

<pre><code class="perl">service ntpd => "restart";</code></pre>

## 管理定时任务

管理 cron 任务。

### cron_entry($entry_name, %options)

#### 参数(Options)

* ensure - 定义 cron 块的状态。可选值为 *present*, *absent*。
* command - 要运行的命令。
* minute - 运行任务的分钟值。
* hour - 运行任务的时钟值。
* month - 运行任务的月份值。
* day_of_week
* day_of_month
* user - cron 任务的用户。
* on_change - 当 cron 块状态发送变化时调用的回调函数。

<pre><code class="perl">cron_entry "run-rhhunter",
  command => "rkhunter --cronjob",
  minute  => 5,
  hour    => 1;
</code></pre>

## 管理用户和组

管理本地用户数据库

### account($user_name, %options)

管理用户账号。

#### 参数(Options)

* ensure - 定义账号状态。可选值为 *present*, *absent*。
* uid - 用户 id。
* groups - 用户所属的组列表。第一个值为主属组。
* home - 家目录。
* expire - 账号过期时间。格式：YYYY-MM-DD
* password - 用户的明文密码。
* crypt_password - 用户的密文密码。仅在 Linux，OpenBSD 和 NetBSD 上有效。
* system - 创建一个系统用户。
* create_home - 是否创建家目录。可选值为 *TRUE*, *FALSE*。
* ssh_key - 添加 SSH key 到 *authorized_keys*。
* comment

<pre><code class="perl">account "krimdomu",
   ensure         => "present",  # default
   uid            => 509,
   home           => '/home/krimdomu',
   comment        => 'User Account',
   expire         => '2011-05-30',
   groups         => [ 'users', 'wheel' ],
   password       => 'blahblah',
   create_home    => TRUE,
   ssh_key        => "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQChUw...";
</code></pre>

### group($group_name, %options)

管理组。

#### 参数(Options)

* ensure - 定义组的状态。可选值为 *present*, *absent*。
* gid - 组 id。
* system - 创建一个系统组。

<pre><code class="perl">group "users",
  ensure => "present";
</code></pre>




