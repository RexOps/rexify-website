% layout 'default';
% title '(R)?ex - A simple framework to simplify systemadministration - Tail Logfiles';

% content_for header => begin
      <meta name="description" content="(R)?ex - manage all your boxes from a central point - Example Tail Logfiles">
      <meta name="keywords" content="Tail, Logfiles, Rex, Apache">
% end

         <h1>出发点</h1>
         <p>这个小例子用来展示如何实时查看日志</p>
         

         <h2>准备</h2>
         <ul>
            <li>下载安装 rex (参加 <a href="/get">获取</a> 页)</li>
         </ul>

         

         <h2>创建一个简单的 Rexfile</h2>
         <p>首先在 $HOME 目录创建一个简单的 Rexfile。</p>

            <pre><code class="perl">use Rex::Commands::Tail;

user "my-user";
password "my-password";
pass_auth;

group fe =&gt; "fe[01..20]";

# run the tasks in parallel
parallelism 20;

desc "Tail Frontend Apache Access Logs";
task "tail-fe", group =&gt; "fe", sub {
        tail "/opt/instances/httpd/fe-i01/logs/access_log";
}; </code></pre>

         

         <p>这个例子会以用户名 <i>my-user</i> 密码 <i>my-password</i> 登录所有服务器，从 fe01 到 fe20，然后持续的 tail 日志文件。</p>

         

         <p>如果你要同时 tail 多台服务器的日志，你必须添加 parallelism 参数，这样才能同时查看所有的服务器日志。</p>

            <pre><code class="bash">$ rex tail-fe</code></pre>

         

         <h2>定制 tail 输出</h2>
         <p>如果你想定制 tail 的输出，你可以添加一个回调函数作为第二个参数。</p>

            <pre><code class="perl">use Rex::Commands::Tail;

user "my-user";
password "my-password";
pass_auth;

group fe =&gt; "fe[01..20]";

# run the tasks in parallel
parallelism 20;

desc "Tail Frontend Apache Access Logs";
task "tail-fe", group =&gt; "fe", sub {
        tail "/opt/instances/httpd/fe-i01/logs/access_log", sub {
            my ($data) = @_;
            my $server_name = connection-&gt;server;
            print "[$server_name] $data\n";
        };
}; </code></pre>

         

         <p>这个例子会在每行起始添加服务器名称。</p>

