% layout 'default';
% title '(R)?ex - A simple framework to simplify systemadministration - Tail Logfiles';

% content_for header => begin
      <meta name="description" content="(R)?ex - manage all your boxes from a central point - Example Tail Logfiles">
      <meta name="keywords" content="Tail, Logfiles, Rex, Apache">
% end

         <h1>Starting Point</h1>
         <p>This is a small example that will show you how to watch logfiles live.</p>
         

         <h2>Preparation</h2>
         <ul>
            <li>Download and install rex (See the <a href="/get">get</a> page)</li>
         </ul>

         

         <h2>Creating a simple Rexfile</h2>
         <p>At first create a simple Rexfile in your $HOME directory.</p>

            <pre><code class="perl">use Rex::Commands::Tail;

user "my-user";
password "my-password";
pass_auth;

group fe =&gt; "fe[01..20]";

# run the tasks in parallel
parallelism 20;

desc "Tail Frontend Apache Access Logs";
task "tail-fe", group =&gt; "fe", sub {
        tail "/opt/instances/httpd/fe-i01/logs/access_log";
}; </code></pre>

         

         <p>This Example will login as <i>my-user</i> with the password <i>my-password</i> on all the servers, from fe01 to fe20 and tail the logfile continuously.</p>

         

         <p>If you want to tail the logs on many servers, you need to add parallelism to (R)?ex. So that you can see the logs of all servers at the same time.</p>

            <pre><code class="bash">$ rex tail-fe</code></pre>

         

         <h2>Customizing the tail output</h2>
         <p>If you want to customize the tail output, you can add a callback function as 2nd parameter.</p>

            <pre><code class="perl">use Rex::Commands::Tail;

user "my-user";
password "my-password";
pass_auth;

group fe =&gt; "fe[01..20]";

# run the tasks in parallel
parallelism 20;

desc "Tail Frontend Apache Access Logs";
task "tail-fe", group =&gt; "fe", sub {
        tail "/opt/instances/httpd/fe-i01/logs/access_log", sub {
            my ($data) = @_;
            my $server_name = connection-&gt;server;
            print "[$server_name] $data\n";
        };
}; </code></pre>

         

         <p>This example will prepend the servername to every line.</p>

