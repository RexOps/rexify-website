% layout 'default';
% title '在 Rex 里使用模块和模板';

% content_for header => begin
      <meta name="description" content="Using modules and templates within Rex">
      <meta name="keywords" content="Rex, Template, Configuration">
% end

<h1>使用模块和模板</h1>

<p>上传一些硬编码的配置文件到你的服务器上往往是不够的。有时候你需要在文件里添加一些动态的值。比如你希望把服务绑定在一个特定的网卡上、或者给不同环境的应用配置不同的数据库服务器。这时候模板技术非常有用。</p>

<p>本例中会展示如何构建一个 ntp 模块，上传不同的 ntp.conf 文件到你的测试、预生产和生产环境里。</p>

<p>首先，我们创建一个新的模块。本指南要求你至少使用的是 Rex 0.41 版(因为要用到 <i>--create-module</i> 命令和 <i>case</i> 关键字)。在你的 <i>Rexfile</i> 所在目录下执行下面命令：</p>

<pre><code class="bash">rexify Service::NTP --create-module</code></pre>

<p>这会在你的 <i>lib</i> 目录下创建一些新的目录和文件：</p>

<pre><code class="bash">.
├── Rexfile
└── lib
    └── Service
        └── NTP
            ├── __module__.pm
            └── meta.yml</code></pre>

<p>meta.yml 文件可以被忽略掉，这个文件只有在你打算共享你的模块到 <a href="http://modules.rexify.org/">Rex 模块目录</a>的时候才有用。最重要的文件是 <i>__module__.pm</i>。在编辑器里打开这个文件。</p>

<p>这个文件也是一个普通的 Perl 模块。唯一不太一样的地方就是文件名，不过一开始你不用太在意这种事情。</p>

<pre><code class="perl">package Service::NTP;
use Rex -feature =&gt; ['1.0'];


task prepare =&gt; sub {
   my $service_name = case operating_system, {
                         Debian  =&gt; "ntp",
                         default =&gt; "ntpd",
                      };

   pkg "ntp",
     ensure =&gt; "present";

   file "/etc/ntp.conf",
      source    =&gt; "files/etc/ntp.conf",
      on_change =&gt; sub {
         service $service_name =&gt; "restart";
      };

   service $service_name,
     ensure =&gt; "started";
};

1;</code></pre>

<p>首先，这个模块检查操作系统是不是 debian (或者 ubuntu)，然后设置服务名称为 "ntp" 或者 "ntpd"。然后它安装 "ntp" 包并且上传一个配置文件。注意这里的 <i>on_change</i> 钩子。如果文件发生变化，这会重启 ntp 服务。最后，Rex 确认服务在系统启动的时候会自动运行。</p>

<p>现在可以创建一个基础的 <i>ntp.conf</i> 文件了。创建 <i>lib/Service/NTP/files/etc</i> 目录，然后往目录里放 ntp.conf 文件。</p>

<pre><code class="bash"># /etc/ntp.conf, managed by Rex

driftfile /var/run/ntp.drift

statistics loopstats peerstats clockstats
filegen loopstats file loopstats type day enable
filegen peerstats file peerstats type day enable
filegen clockstats file clockstats type day enable

server ntp01.company.tld
server ntp02.company.tld</code></pre>

<p>现在你如果想分发不同的 <i>ntp.conf</i> 文件到不同的环境，你得往这个目录底下放好几个 ntp.conf 文件。Rex 会根据命令行参数 <i>-E $env</i> 来选择应该使用哪个文件。Rex 首先尝试找一个叫 <i>ntp.conf.$environment</i> 的文件，不存在的话再回退到找 <i>ntp.conf</i>。</p>

<pre><code class="bash">.
├── Rexfile
└── lib
    └── Service
        └── NTP
            ├── __module__.pm
            ├── files
            │   └── etc
            │       ├── ntp.conf
            │       ├── ntp.conf.preprod
            │       ├── ntp.conf.prod
            │       └── ntp.conf.test
            └── meta.yml</code></pre>

<p>不过这意味着，每次修改 ntp.conf 文件里的配置，你需要一口气修改 4 个文件。所以你需要用模板技术。</p>

<pre><code class="perl">package Service::NTP;
use Rex -feature =&gt; ['1.0'];

task prepare =&gt; sub {
   my $service_name = case operating_system, {
                         Debian  =&gt; "ntp",
                         default =&gt; "ntpd",
                      };

   my $ntp_server   = case environment, {
                         prod    =&gt; ["ntp01.company.tld", "ntp02.company.tld"],
                         preprod =&gt; ["ntp01.preprod.company.tld"],
                         test    =&gt; ["ntp01.test.company.tld"],
                         default =&gt; ["ntp01.company.tld"],
                      };

   pkg "ntp",
     ensure =&gt; "present";

   file "/etc/ntp.conf",
      content   =&gt; template("files/etc/ntp.conf", ntp_servers =&gt; $ntp_server),
      on_change =&gt; sub {
         service $service_name =&gt; "restart";
      };

   service $service_name,
     ensure =&gt; "started";
};

1;</code></pre>

<p>现在我们可以创建模板了。Rex 默认模板和其他模板引擎看起来很类似。不过你也可以直接使用其他现有的模板引擎，比如 <a href="https://github.com/krimdomu/rex-template-tt">Template::Toolkit</a>。</p>

<pre><code class="bash"># /etc/ntp.conf, managed by Rex

driftfile /var/run/ntp.drift

statistics loopstats peerstats clockstats
filegen loopstats file loopstats type day enable
filegen peerstats file peerstats type day enable
filegen clockstats file clockstats type day enable

&lt;% for my $server (@{ $ntp_servers }) { %&gt;
server &lt;%= $server %&gt;
&lt;% } %&gt;</code></pre>

<h2>预定义变量</h2>

<p>我们有预定义一些变量让你在模板中使用。比如你想在特定 ip 上绑定一个服务的时候，就可以用到网卡的 ip 地址。你可以通过下面代码展示出系统的全部预定义变量。</p>

<pre><code class="perl">task "get_infos", "server01", sub {
   dump_system_information;
};</code></pre>

<p>下面就是一个 CentOS 虚拟机的输出示例：</p>

<pre><code class="perl">$kernelversion = '#1 SMP Tue May 15 22:09:39 BST 2012'
$memory_cached = '357'
$memory_total = '498'
$kernelrelease = '2.6.32-220.17.1.el6.i686'
$Kernel = {
      kernelversion =&gt; '#1 SMP Tue May 15 22:09:39 BST 2012'
      architecture =&gt; 'i686'
      kernel =&gt; 'Linux'
      kernelrelease =&gt; '2.6.32-220.17.1.el6.i686'
   }
$hostname = 'c6test0232'
$operatingsystem = 'CentOS'
$operatingsystemrelease = '6.2'
$architecture = 'i686'
$domain = 'test.rexify.org'
$eth0_mac = '00:1C:42:9E:0E:28'
$kernel = 'Linux'
$swap_free = '2005'
$VirtInfo = {
      virtualization_role =&gt; 'guest'
      virtualization_type =&gt; 'parallels'
   }
$memory_shared = '0'
$Network = {
      networkdevices =&gt; [
         'eth0'
      ]
      networkconfiguration =&gt; {
         eth0 =&gt; {
            broadcast =&gt; '10.211.55.255'
            ip =&gt; '10.211.55.60'
            netmask =&gt; '255.255.255.0'
            mac =&gt; '00:1C:42:9E:0E:28'
         }
      }
   }
$memory_used = '440'
$kernelname = 'Linux'
$Swap = {
      free =&gt; '2005'
      used =&gt; '10'
      total =&gt; '2015'
   }
$swap_total = '2015'
$memory_buffers = '47'
$eth0_ip = '10.211.55.60'
$swap_used = '10'
$memory_free = '57'
$manufacturer = 'Parallels Software International Inc.'
$Memory = {
      shared =&gt; '0'
      buffers =&gt; '47'
      free =&gt; '57'
      used =&gt; '440'
      total =&gt; '498'
      cached =&gt; '357'
   }
$eth0_broadcast = '10.211.55.255'
$eth0_netmask = '255.255.255.0'
$Host = {
      domain =&gt; 'test.rexify.org'
      manufacturer =&gt; 'Parallels Software International Inc.'
      kernelname =&gt; 'Linux'
      hostname =&gt; 'c6test0232'
      operatingsystemrelease =&gt; '6.2'
      operatingsystem =&gt; 'CentOS'
   }</code></pre>

<p>你可以在模板里使用这些变量。假设你是要在 eth1 网卡上绑定 apache。</p>

<pre><code class="bash">Listen &lt;%= $eth1_ip %&gt;:80</code></pre>

<h2>使用模块</h2>

<p>使用你的模块就必须要添加到你的 <i>Rexfile</i> 里。这个非常简单，一行就行：</p>

<pre><code class="perl">use Rex -feature =&gt; ['1.0'];

user "root";
password "foo";

require Service::NTP;

1;</code></pre>

<p>然后你可以列出你的任务并执行他们了。</p>

<pre><code class="bash">$ rex -T
[2013-03-30 02:35:32] INFO - eval your Rexfile.
Tasks
  Service:NTP:prepare</code></pre>

<pre><code class="bash">$ rex -H yourserver01 Service:NTP:prepare</code></pre>
