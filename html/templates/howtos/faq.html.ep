% layout 'default';
% title 'FAQ';

% content_for header => begin
      <meta name="description" content="FAQ">
      <meta name="keywords" content="FAQ, run, authentication">
% end

<h1>常见问题</h1>
<p>这里我们将维护一个常见问题列表和答案.</p>

<div class="vspace"></div>
<h2>为什么 run 命令不格式化输出</h2>
<p><i>run</i> 命令在数组上下文里将返回一个数组。</p>
<p>如果你只是想打印标准输出的内容到终端，你可以强制在标量上下文中调用 run 命令。</p>
   <pre><code class="perl">my $output = run "df -h";
say $output;</code></pre>

<h2>How can I get the current server from within a task?</h2>
<pre><code class="perl">my $current_server = connection->server;</code></pre>

<h2>How can I pass parameters to a task?</h2>
<pre><code class="perl">task 'mytask', sub {
  my $parameters = shift;
  my $parameter1_value = $parameters->{parameter1};
};</code></pre>

<p>Then you can run mytask from CLI like this:</p>
<pre><code class="bash">rex -H hostname mytask --parameter1=value1</code></pre>

<h2>How can I run a block of code with one command?</h2>
<p>You can use the <a href="http://modules.rexify.org/module/Rex::Misc::ShellBlock">ShellBlock</a> module. This module can be installed by running:</p>
<pre><code class="shell">$ rexify --use Rex::Misc::ShellBlock</code></pre>

<p>Then, you can run your shell code remotely as:</p>

<pre><code class="perl"> use Rex::Misc::ShellBlock;
    
 task "myexec", sub {
    shell_block <<EOF;
 echo "hi"
 EOF
  
 };</code></pre>

<p>See the linked documentation page for how to use this module with Perl,
Python, or other languages.</p>

<h2>How can I run a local script on the remote?</h2>
<p>If you have a local script 'files/script', you can run it on the remote
using the ShellBlock module referred to in the FAQ above. After you install
as pointed out above, you can run the script remotely with the command:</p>

<pre><code class="perl"> use Rex::Misc::ShellBlock;
    
 task "myexec", sub {
     shell_block template('files/script');
 };</code></pre>

<h2>How do I run a local script on the remote under a different user?</h2>
<p>Given the same scenario as above, but with the additional requirement
to run the script as a different user, the solution looks like below:</p>
<pre><code class="perl">
task "myexec", sub {
     sudo {
        command => sub {
           shell_block template('files/script');
        },
        user    => 'root'
     };
};</code></pre>

<h2>How do I check the exit status of a remotely run command?</h2>
<p>Rex assigns the exit code from the remote invocation of <code>run</code>
or <code>shell_block</code> statements to the <code>$?</code> variable.</p>

<h2>How do I use Rex's built-in logger for ERROR/WARN/INFO/DEBUG messages?</h2>
<pre><code class="perl">
   Rex::Logger::info("some message");           # for INFO  (green)
   Rex::Logger::info("some message", "warn");   # for WARN  (yellow)
   Rex::Logger::info("some message", "error");  # for ERROR (red)
</code></pre>

