# New Project

After your first login you'll see the following screen. 

![no projects available](/img/jobcontrol/0_project.png)

This is because you don't have created a project now. To create a new project press the blue *New Project* button. This will lead you to another screen with some input fields to create a new project.


## Create new Project

![create new project](/img/jobcontrol/1_project.png)

For this example it is important that your time is correct on the system where JobControl is running. Also is is important that you place your Amazon keys into */etc/rex/aws* directory.

* /etc/rex/aws/access.key
* /etc/rex/aws/secret_access.key

And the private and public keys into */etc/rex/aws/keys*.

* private key: /etc/rex/aws/keys/{{keyname}}.pem
* public key: /etc/rex/aws/keys/{{keyname}}.pub


In this screen you have to enter the name for the new project. For example *Homepage*.

After you have created the project you will return to the project overview page from the beginning. But now there is your new project listed.


![project listing](/img/jobcontrol/2_project.png)

To get to your project you can click on the project name or choose your project from the menubar.

## Configuring a Project

A project consists of Rexfiles, jobs and formulars. To get started you first need to upload your Rexfiles. In this howto we will configure a project that will create an Amazon EC2 instance with a preconfigured apache webserver for developers to test their application.

### Uploading Rexfiles

Now you have to upload a *Rexfile* into your project. Currently there are 3 options how you can do this.

* Use git
* Use rexify command
* Create a .tar.gz file by hand

#### Using git

This is the prefered way. To see how you can setup a git infrastructure for Rex you can read the [chapter](/howtos/book/complete_rex_infrastructure.html) in the book. With git you have the possibility to reload the *Rexfile* from within the UI.

This this example we're using the Rexfile from: [https://github.com/RexOps/service-ec2.git](https://github.com/RexOps/service-ec2). This Rexfile just creates a new Amazon EC2 instance and advice JobControl to connect to this new server for the next task that configures the Apache server.


![rexfile via git](/img/jobcontrol/1_rexfile.png)

After pressing *Create Rexfile* this will create a background job to download the Rexfile. The background job is executed by the minion. You'll find the log output in */var/log/rex/access.log*.

The minion will also take care of downloading the specified dependencies in the meta.yml file (if present).

So after a few minutes you can press the F5 button to reload the project overview and your Rexfile will appear in the listing.

#### Using rexify command

If you don't use git, you can upload your *Rexfile* with the *rexify* command. For this you have to open a shell and navigate to the folder of your *Rexfile*.

  cd /path/to/your/Rexfile
  rexify --server=http://$your-server:8080 \\
    --username=admin \\
    --password=admin \\
    --upload \\
    --project="Homepage" \\
    --name="Create EC2 Instance" \\
    --description="Create a new EC2 Instance"


The *rexify* command will create a .tar.gz file of the current directory and upload it to the server.

#### Create .tar.gz manually

It is also possible to create the .tar.gz file manually. For this you have to create the following directory structur inside the .tar.gz file.

  + some-name
  +--+ Rexfile
    + files      # optional
    + templates  # optional
    + ... other files


### Uploading a 2nd Rexfile

Now we need to upload the Rexfile that creates the Apache webserver. For this you can use this example service [https://github.com/RexOps/service-webserver.git](https://github.com/RexOps/service-webserver).

This Rexfile is able to install the apache webserver and to configure virtual hosts. Later we will configure a formular with which the developers can configure the virtual hosts on their EC2 instance.

So for this Rexfile please fill out the following values:

* Rexfile Name: Static Apache
* Rexfile Description: Setup and configure Apache
* Rexfile URL: https://github.com/RexOps/service-webserver.git


## Creating a Job

Now, after we have created our 2 Rexfiles it is time to create the first *Job*. A job is a collection of Rexfiles and Tasks that should be executed on selected hosts. If you import/upload Rexfiles the JobControl server will inspect the Rexfile and extract all servers you have defined their (It will also read your server.ini file if you have one.).

So to create a new *Job* press the button *New Job*. This button will lead you to a formular where you can define the job and what the job should be executing.

![create new job](/img/jobcontrol/1_job.png)

Please fill in the Job name and description.

In the *Options* section you can define the environment to use during execution. This will list all the environments you have defined in your Rexfiles.

In the *Workflow* section you can define what JobControl should do if a step fails. And you can define the *Execution strategy*. **Node** means, JobControl will execute *all* tasks on the first server and after that *all* tasks on the next server and so on. **Step** means, JobControl will execute the first task on each selected server and after that the second task on each selected server and so on.

So for this example you have to choose **Node** as the *Execute strategy*.


![define tasks](/img/jobcontrol/2_job.png)

In the *Steps* section you can choose the tasks which the Job should execute. You can drag'n'drop the tasks from the right side to the left side. The screenshot means, first execute from the Rexfile *Create EC2 Instance* the task *setup* and then execute from the Rexfile *Static Webserver* the task *setup*.

## Creating a formular

Now we have our Job and can execute this job. But in our Rexfiles we don't defined any servers so we can't execut it yet. And also we want to create Amazon EC2 instances with virtual hosts on it. So at last we need to create a formular where we can define all needed things.


![create formular](/img/jobcontrol/1_formular.png)

If you click on the *New Formular* button in the Project overview you will get a page where you can configure your formular. Please fill in the formular name and description.

In the *Job* dropdown you can choose which job the formular should execute. Choose our just created *Create EC2 Instance with Apache* job.

You can also decide if the formular should be public, this means that the users don't need to authenticate against JobControl to execute this formular. This is usefull if you don't want to create users for all your developers.

Then you have to choose the *Steps File*. An example *Steps File* can be found in the [service-ec2](https://raw.githubusercontent.com/RexOps/service-ec2/master/formulars/create_instance.yml) project. Please download this file to your computer and select this file their. In this file you can also define which Amazon private/public keys the developers can choose. So take a look at this file and modify it to suite your needs.

In the *Choose the servers* section you can define on which servers the formular should be executed on. But currently we don't have any servers in our Rexfiles so just leave this empty.

![create formular](/img/jobcontrol/2_formular.png)

After you have filled out every required field you can press the *Create Formular* button.

Now you can run the formular from the Project overview page.

![run formular](/img/jobcontrol/3_formular.png)

The formular contains 2 steps. One step to define the name of the EC2 instance and one to define the virtual hosts. You can define everything in the YAML file you have uploaded during the formular creation.

![step 1 formular](/img/jobcontrol/4_formular.png)

If you take a look inside the steps yaml file you'll notice the key *repeatable* for the virtual hosts formular. This means, that you can define multiple virtual hosts by pressing the *Add* button.

![step 2 formular](/img/jobcontrol/5_formular.png)

You can see the already configured data of repeatable formulars at the bottom.

![see the data of repeatable formulars](/img/jobcontrol/6_formular.png)

After you have pressed the *Finish* button the job is scheduled for execution in the background.

![job scheduled](/img/jobcontrol/7_formular.png)
