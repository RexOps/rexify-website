# 新项目

你第一次登录的时候，会看到如下界面：

![no projects available](/img/jobcontrol/0_project.png)

这是因为你还没创建过项目。点击蓝色的 *New Project* 按钮创建一个新的项目。然后会跳转到另一个带有输入框的界面帮助你创建一个新的项目。


## 创建新项目

![create new project](/img/jobcontrol/1_project.png)

作为这个示例的很重要的一点，请确认运行 JobControl 的服务器的时间是正确的。此外，把你的亚马逊密钥放在 */etc/rex/aws* 目录下。

* /etc/rex/aws/access.key
* /etc/rex/aws/secret_access.key

而私钥和公钥则放在 */etc/rex/aws/keys* 下。

* 私钥: /etc/rex/aws/keys/{{keyname}}.pem
* 公钥: /etc/rex/aws/keys/{{keyname}}.pub


在这一屏，你需要输入新项目的名称。比如 *Homepage*。

创建好项目后，会跳转回到开始的项目总览页。不过现在那里会出现你刚创建的新项目了：


![project listing](/img/jobcontrol/2_project.png)

点击项目名称，或者在菜单栏里选择项目，就可以进入你的项目了。

## 配置项目

一个项目包括有 Rexfiles，jobs 和 formulars。第一步，你需要上传自己的 Rexfiles。作为示例，我们这里会配置项目来创建一个亚马逊 EC2 实例，为开发人员提供一个预配置好的 apache 服务器供他们测试应用。

### 上传 Rexfiles

现在你得上传一个 *Rexfile* 到项目里。目前有 3 种可选方式。

* 用 git
* 用 rexify 命令
* 手工创建一个 .tar.gz 文件

#### 用 git

这是推荐的方式。怎么为 Rex 配置 git 架构可以阅读[本章](/howtos/book/complete_rex_infrastructure.html)。利用 git，你可以在 UI 界面中完成重载 *Rexfile* 的工作。

本例中，我会使用 [https://github.com/RexOps/service-ec2.git](https://github.com/RexOps/service-ec2)。这个 Rexfile 就是创建一个新的亚马逊 EC2 示例，然后建议 JobControl 连接到这个新服务器运行下一个配置 Apache 服务器的任务。


![rexfile via git](/img/jobcontrol/1_rexfile.png)

点击 *Create Rexfile* 后，就会创建一个后台任务下载 Rexfile。这个后台任务是由 minion 执行的。日志输出记录在 */var/log/rex/access.log*。

minion 还会自动处理 meta.yml 文件里定义的依赖(如果有的话)。

稍微等几分钟，你可以按 F5 键刷新项目总览页，就可以看到你的 Rexfile 出现在列表里了。

#### 用 rexify 命令

如果你不用 git，你可以用 *rexify* 命令上传你的 *Rexfile*。打开终端，进到放 *Rexfile* 的文件夹里，执行命令：

  cd /path/to/your/Rexfile
  rexify --server=http://$your-server:8080 \\
    --username=admin \\
    --password=admin \\
    --upload \\
    --project="Homepage" \\
    --name="Create EC2 Instance" \\
    --description="Create a new EC2 Instance"


*rexify* 命令会把当前目录打包成一个 .tar.gz 文件，上传到服务器。

#### 手工创建 .tar.gz

你也可以手工创建 .tar.gz 文件。首先你需要创建下面这样的目录结构：

  + some-name
  +--+ Rexfile
    + files      # optional
    + templates  # optional
    + ... other files


### 上传第 2 个 Rexfile

现在我们需要上传创建 Apache 服务器的 Rexfile 了。可以用这个示例服务 [https://github.com/RexOps/service-webserver.git](https://github.com/RexOps/service-webserver)。

这个 Rexfile 可以安装 apache 服务器，然后配置虚拟主机。稍后，我们会配置一个 formular 给开发人员，他们可以用这个来配置自己 EC2 实例上的虚拟主机。

所以这个 Rexfile 需要填充下列值：

* Rexfile 名称: Static Apache
* Rexfile 描述: Setup and configure Apache
* Rexfile 地址: https://github.com/RexOps/service-webserver.git


## 创建一个任务

现在我们已经创建 2 个 Rexfiles 了，是时候创建我们的第一个 *Job* 了。Job 是要在被选中的主机上执行的 Rexfiles 和 Tasks 的集合。如果你导入/上传 Rexfiles，JobControl 服务器会检查 Rexfile，然后提取你定义的所有服务器(如果有的话，也会读取你的 server.ini 文件)。

创建一个新的 *Job*，点击 *New Job* 按钮。跳转到 formular 页，在这里你可以定义任务以及任务需要在哪里执行。

![create new job](/img/jobcontrol/1_job.png)

请输入任务名称和描述。

在 *Options* 区域，你可以定义执行时使用的环境参数。这里会列出你在 Rexfiles 里定义好的所有环境。

在 *Workflow* 区域，你可以定义在某一步失败时，JobControl 应该怎么做。还可以定义 *Execution strategy*。**Node** 表示，JobControl 会在第一台服务器上执行完*所有*任务，然后第二台执行*所有*任务，然后第三台，依次执行下去。**Step** 表示，JobControl 会在每台选中的服务器上执行第一个任务，然后每台上执行第二个任务，依次执行下去。

在这里，我们选择 **Node** 作为 *Execute strategy*。


![define tasks](/img/jobcontrol/2_job.png)

在 *Steps* 区域，你可以选择 Job 需要执行的任务。你可以从右边拖拽任务到左边。截图说明，从 Rexfile *Create EC2 Instance* 里的 *setup* 任务开始执行，然后再执行 Rexfile *Static Webserver* 里的 *setup* 任务。

## 创建一个 formular

现在我们有了自己的 Job 而且可以执行它。不过在 Rexfiles 里没有定义具体的服务器，所以还不能真正的运行。而且我们还需要创建亚马逊 EC2 实例再配置虚拟主机。所以最后，我们需要创建一个 formular，来定义所有需要的这些东西。


![create formular](/img/jobcontrol/1_formular.png)

在项目总览页点击 *New Formular* 按钮，跳转到 formular 配置页。填写 formular 名称和描述。

在 *Job* 下拉栏选择 formular 需要执行哪个 job。选择我们刚创建的 *Create EC2 Instance with Apache* 。

你可以决定这个 formular 是否公开，也就是说 JobControl 对这个 formular 不需要做用户权限认证。如果你不想给所有的开发逐一创建用户，这个办法应该可行。

然后要选择 *Steps File*。示例见 [service-ec2](https://raw.githubusercontent.com/RexOps/service-ec2/master/formulars/create_instance.yml) 项目。下载这个文件到你电脑然后选中它。在这个文件里，你可以定义开发人员可以选择哪个亚马逊私钥/公钥。所以请仔细看看文件，修改成你需要的样子。

在 *Choose the servers* 区域，你可以定义 formular 应该在哪些服务器上执行。不过目前我们 Rexfiles 里没定义服务器，所以先留空。

![create formular](/img/jobcontrol/2_formular.png)

填完所有必填项后，你可以点击 *Create Formular* 按钮。

现在你可以在项目总览页运行 formular 了。

![run formular](/img/jobcontrol/3_formular.png)

formular 包括 2 步。第一步定义 EC2 实例的名字，第二步定义虚拟主机。这些你都可以在创建 formular 时上传的 YAML 文件里定义。

![step 1 formular](/img/jobcontrol/4_formular.png)

如果你看看这个 steps yaml 文件，你会注意到为虚拟主机 formular 做的 *repeatable* 配置。这个意思是：你可以通过点击 *Add* 按钮定义多个虚拟主机。

![step 2 formular](/img/jobcontrol/5_formular.png)

你可以在底部看到已经配置好的 repeatable formular 数据。

![see the data of repeatable formulars](/img/jobcontrol/6_formular.png)

等你点击了 *Finish* 按钮，任务就进入后台排期，准备执行了。

![job scheduled](/img/jobcontrol/7_formular.png)
