% layout 'default';
% title 'Release notes for 0.45';

% content_for header => begin
      <meta name="description" content="(R)?ex - manage all your boxes from a central point - Release notes">
      <meta name="keywords" content="Configuration, Management, Configuration Management, Linux, Deployment, Devops">
% end

         <h1>Release notes for 0.45</h1>
         <p>下面是 0.45 版的主要变更：</p>
        <p>感谢所有贡献代码和修复 bug 报告的人，是你们让 Rex 越来越好 :)</p>

         <h2>云</h2>
         <p>在云 API 里的变化</p>

         <ul class="simple-list">
            <li>
              <p>OpenStack 支持 - Ferenc Erki</p>
              <ul>
                <li>
                  <p>认证和终端。</p>
<pre><code class="perl">cloud_service "OpenStack";
cloud_auth tenant_name =&gt; "tenant",
           username    =&gt; "user",
           password    =&gt; "password";
cloud_region "http://openstack.domain.tld:5000/v2.0";</code></pre>

                </li>
                <li><p>创建卷和虚拟机。</p>

<pre><code class="perl">my $vol_id = cloud_volume create =&gt; { size =&gt; 1, zone =&gt; "nova", };

my $instance = cloud_instance create =&gt; {
  image_id =&gt; "ccd8bcab-8ad2-4744-8227-08279fab7a42",
  name     =&gt; "ostack01",
  plan_id  =&gt; 2,
  volume   =&gt; $vol_id,
};</code></pre>

                </li>
                <li><p>终止实例并移除卷。</p>
<pre><code class="perl">cloud_instance terminate =&gt; $instance->{id};
cloud_volume delete =&gt; $vol_id;</code></pre>


              </li>
              </ul>
            </li>
            <li>添加 cloud_image_list() 函数</li>
            <li>添加 cloud_network() 函数来管理云的网络，前提是 provider 支持。</li>
         </ul>

          <h2>通用</h2>
          <p>核心代码内的其他变更。包括新的资源以及原有资源的新参数。</p>

          <ul>
            <li><p>file() 资源的新参数</p>
              <ul>
                <li><p>file() 资源的 no_overwrite 参数。</p><p>设置该参数后，文件将再也不能被覆盖。</p>
<pre><code class="perl">file "/var/named/$zone->{name}.zone",
  content      =&gt; template( '@zone-file.tpl', conf =&gt; $conf, %{$zone} ),
  owner        =&gt; "named",
  group        =&gt; "named",
  no_overwrite =&gt; TRUE;</code></pre>
                </li>
                <li><p>file() 资源的 ensure 参数支持 directory 选项。</p><p>如果 ensure 参数设置为 directory 后，file() 资源会创建一个目录而不是文件</p>
<pre><code class="perl">file "/var/named",
  ensure =&gt; "directory",
  owner  =&gt; "named",
  group  =&gt; "named";</code></pre>
                </li>
                <li><p>file() 资源支持数组定义。</p><p>这样可以统一操作多个文件而不用重复粘贴代码。</p>
<pre><code class="perl">file [
    "/etc/rex/io/inventory/bootdevice", "/etc/rex/io/inventory/bridge",
    "/etc/rex/io/inventory/sysinfo", "/etc/rex/io/inventory/os"
  ],
  owner =&gt; "root",
  group =&gt; "root",
  mode  =&gt; 755;</code></pre>
                </li>
              </ul>
              <li><p>run() 资源的新参数。</p>
                <ul>
                  <li><p>run() 资源现在也可以有名字。</p><p>在做通知的时候名字就有用了。某个命令只有在被通知的时候才会被执行。</p>
<pre><code class="perl">run "kill-process-httpd",
  command       =&gt; "killall -KILL httpd",
  only_notified =&gt; TRUE;

# somewhere else in the code
notify run =&gt; "kill-process-httpd";</code></pre>
                  </li>
                  <li><p>run() 资源的 <i>creates</i> 参数。</p><p>用来告诉 Rex 这个命令会创建一个文件，如果这个文件已经存在，这个命令就不要再执行了。</p>
<pre><code class="perl">run "download-ipxe",
  command =&gt; "wget -O /var/lib/tftpboot/undionly.ipxe http://boot.ipxe.org/undionly.kpxe",
  creates =&gt; "/var/lib/tftpboot/undionly.ipxe";</code></pre>
                  </li>
                  <li><p>run() 资源的 <i>only_if</i> 和 <i>unless</i> 参数。</p><p>仅在指定命令可以成功执行(或者不成功)的情况下才执行资源。</p>
<pre><code class="perl">run "add-service-os",
    command =&gt; "mysql -uroot &lt; /tmp/data.sql",
    unless  =&gt; "mysql -uroot dbschema -e 'SELECT id FROM os_template WHERE id=2' | grep -q 2";</code></pre>
                  </li>
                  <li><p>支持定制的环境设置。 - #316 - andrejzverev</p><p>可以给 run() 资源添加指定的环境变量。</p>
<pre><code class="perl">run "my_command",
  env =&gt; {
    env_var_1 =&gt; "the value for 1",
    env_var_2 =&gt; "the value for 2",
  };</code></pre>
                  </li>
                </ul>
              </li>
              <li><p><i>run</i> 和 <i>service</i> 资源添加通知功能。</p>
                <ul>
                  <li><p>service 会在任务的最后发出通知。</p>
<pre><code class="perl">service "httpd", ensure =&gt; "running";

# somewhere else in the code
file "/etc/httpd/httpd.conf",
  content   =&gt; template("templates/httpd.conf.tpl", %vars),
  on_change =&gt; sub { notify service =&gt; "httpd"; };</code></pre>
                  </li>
                </ul>
              </li>
              <li><p><i>pkg</i> 资源(替代 install 函数)。</p>
<pre><code class="perl">pkg "vim", ensure =&gt; "present";
pkg "httpd", ensure =&gt; "2.4.6";
pkg "vim-tiny", ensure =&gt; "absent";
pkg ["tftp-server", "wget"], ensure =&gt; "latest";</code></pre>
            </li>
            <li><p>新增 account() 资源(替代 create_user 函数)。</p>
<pre><code class="perl">account "krimdomu",
  ensure   =&gt; "present",
  uid      =&gt; 509,
  home     =&gt; '/root',
  comment  =&gt; 'User Account',
  expire   =&gt; '2011-05-30',
  groups   =&gt; ['root', '...'],
  password =&gt; 'blahblah',
  system   =&gt; 1,
  no_create_home =&gt; TRUE,
  ssh_key        =&gt; "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQChUw...";</code></pre>
            </li>
<li><p>支持 -g 指定用户组名称 - #330 - fanyeren</p></li>
<li><p><i>can_run()</i> 现在返回能找到的第一个命令，返回值为字符串 - #193</p></li>
<li><p>如果 dmidecode 不可用，通过 /proc/cpuinfo 读取 CPU 信息 - #306</p></li>

          </ul>

          <h2>Bugfixes</h2>
          <p>已知且被修复了的 bugs：</p>

          <ul>
<li><p>检查 iptables 规则是否已经存在。</p></li>
<li><p>修复 SCM::Git 在 sudo 下正常运行。</p></li>
<li><p>更新 _parse_ip 函数，支持解析 ppp0。 #328 - Tomohiro Hosaka。</p></li>
<li><p>解决如果 rsync 命令不存在导致的 Rex 永远等待的情况 - #331 - Joris DE POOTER。</p></li>
<li><p>修复 $Rex::Logger::format 没有被应用 - #335。</p></li>
<li><p>修复 windows 上 download() 命令。</p></li>
<li><p>修复 debian 上的 system_update - #339 - Niklas Larsson。</p></li>
          </ul>
