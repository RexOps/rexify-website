% layout 'default';
% title 'Release notes for 0.46';

% content_for header => begin
      <meta name="description" content="(R)?ex - manage all your boxes from a central point - Release notes">
      <meta name="keywords" content="Configuration, Management, Configuration Management, Linux, Deployment, Devops">
% end

         <h1>Release notes for 0.46</h1>
         <p>These are the changes in 0.46 release.</p>
        <p>We want to thank all the people for contributing code and to fill bug reports. This helps making Rex better and better :)</p>

<h2>Incompatible Changes</h2>
<p>We're sorry, but this release comes with some incompatible changes. The most
  changes won't effect the majority of users, but we needed to change those things
  to fix some nasty things and to be more flexible in the future.</p>
<ul>
  <li>Reporting: The report format changed. The output and the internal API of the reporting
     interface changed. With this change we are more flexible for future improvements.</li>
  <li>User module: We changed the creation of home directories to follow the policy of the target system.</li>
  <li>Core: Caching is now active by default. This might break things
    if you're using chroot() inside a task, to change to another system. (For example to chroot from a debian system into a redhat system.)</li>
</ul>

<h2>Rex::Test</h2>
<p>With Rex::Test it is possible to test your Rexfile on a local VM before executing the code on your servers.
  Rex::Test uses Rex::Box to create the VM, but currently it only supports VirtualBox VMs.</p>

<p>To create a test just create a new file inside a <i>t</i> directory: <i>t/base.t</i>.</p>

<pre><code class="perl">use Rex::Test::Base;
use Data::Dumper;
use Rex -base;

test {
  my $t = shift;

  $t-&gt;name("ubuntu test");

  $t-&gt;base_vm("http://box.rexify.org/box/ubuntu-server-12.10-amd64.ova");
  $t-&gt;vm_auth(user =&gt; "root", password =&gt; "box");

  $t-&gt;run_task("setup");

  $t-&gt;has_package("vim");
  $t-&gt;has_package("ntp");
  $t-&gt;has_package("unzip");
  $t-&gt;has_file("/etc/ntp.conf");
  $t-&gt;has_service_running("ntp");
  $t-&gt;has_content("/etc/passwd", qr{root:x:0:}ms);

  run "ls -l";
  $t-&gt;ok($? == 0, "ls -l returns success.");

  $t-&gt;finish;
};

1;</code></pre>

<h2>Rex::Box</h2>
<p>Create clean development environments for your projects. Test your software in a production like environment.</p>
<p>With Rex/Boxes you can easily create your test environment with VirtualBox.
  You can use prebuild VM Images or roll your own. Read the <a href="http://box.rexify.org/guide">quickstart guide</a> to create your own environment in minutes.</p>
<ul>
  <li>
    <p>This release brings support for KVM boxes. The KVM Rex::Box provider also allows the creation of Boxes on remote systems.</p>
<pre><code class="perl"># Rexfile
set box =&gt; "KVM";

#
# CALL:
# rex init --name=gpw --url=http://domain.tld/ubuntu-server-12.10-amd64.qcow2
desc "Initialize and start the VM: rex init --name=vmname [--url=http://...]";
task "init", make {
  my $param = shift;

  box {
    my ($box) = @_;
    $box-&gt;name( $param-&gt;{name} );

    # where to download the base image
    $box-&gt;url( $param-&gt;{url} );

    # default is nat
    $box-&gt;network(
      1 =&gt; {
        type =&gt; "nat",
      },
      2 =&gt; {
        type   =&gt; "bridged",
        bridge =&gt; "br1",
      }
    );

    # define the authentication to the box
    # if you're downloading one from box.rexify.org this is the default.
    $box-&gt;auth(
      user     =&gt; "root",
      password =&gt; "box",
    );

    # if you want to provision the machine,
    # you can define the tasks to do that
    $box-&gt;setup(qw/install_webserver/);
  };

};</code></pre>
  </li>
</ul>


         <h2>Cloud</h2>
         <p>Changes in the Cloud API</p>
<ul class="simple-list">
   <li>
     <p>Support for RackSpace via <a href="#">modules</a>.</p>
     <ul>
       <li>
         <p>Authentication and endpoint.</p>
<pre><code class="perl">cloud_service "RackSpace";
cloud_auth "user", "key";
cloud_region "IAD";
</code></pre>

       </li>
       <li><p>Creating volumes and vms.</p>

<pre><code class="perl">my $vol_id = cloud_volume create =&gt; { size =&gt; 1, };

my $instance = cloud_instance create =&gt; {
  image_id =&gt; "80fbcb55-b206-41f9-9bc2-2dd7aac6c061",
  name     =&gt; "myvm01",
  flavor   =&gt; "performance1-1",
  networks =&gt; ["a733f9d7-098e-4bf1-881d-5a91e84b44bb"];  # networks is optional
};

cloud_volume attach =&gt; $vol_id,
    to =&gt $instance&gt;{id};
</code></pre>

       </li>
       <li><p>Terminating an instance and removing the volume.</p>
<pre><code class="perl">cloud_instance terminate =&gt; $instance&gt;{id};
cloud_volume delete =&gt; $vol_id;</code></pre>

     </li>
     </ul>

   </li>
   <li>fixed a case where amazon returns instance item in an array - Kasim Tuman</li>
   <li>fixed multiple tags - David Golovan</li>
 </ul>

<h2>Reporting</h2>
<ul>
  <li>
<p>Refactored report generation. This change break backward compatibility because the report format changed.</p>
</li>
</ul>


<h2>Core</h2>
<ul>
  <li>
    <p>Caching is now enabled by default. This might break backward compatibility if you're using chroot() inside a task to chroot to another OS.</p>
  </li>
  <li>
    <p>
      Allow passing template content to template command - #345 - reneeb
    </p>
    <pre><code class="perl">file "/etc/file.cnf",
  content =&gt; template(\'&lt;%= $name %&gt; is cool!', name =&gt; 'Rex');</code></pre>
  </li>
  <li>
    <p>
      Added 'no_cache' feature. If you need to disable the cache, use this.
    </p>
    <pre><code class="perl"># Rexfile
use Rex -feature =&gt; ['no_cache'];</code></pre>
  </li>
  <li>
    <p>Added a special load path for perl libraries, so that we don't mix up perl and rex modules. (lib/perl)</p>
  </li>
  <li>
    <p>Refactored handling of home directory creation. This might break compat. because we are following the system default now. (added create_home option) - #270 - FErki</p>
  </li>
  <li>
    <p>CMDB path can now have variables / can be extended.</p>
    <pre><code class="perl"># Rexfile
use Rex::CMDB;
set cmdb =&gt; {
  type =&gt; "YAML",
  path =&gt; [
    "cmdb/{operatingsystem}/{hostname}.yml",
    "cmdb/{operatingsystem}/default.yml",
    "cmdb/{environment}/{hostname}.yml",
    "cmdb/{environment}/default.yml",
    "cmdb/{hostname}.yml",
    "cmdb/default.yml",
  ],
};</code></pre>
  </li>
  <li>
    <p>Connect failure reports "Error running task/batch: Wrong username/password or wrong key"  - #359 - eduardoj</p>
  </li>
  <li>
    <p>Extended rexify command to work with git.</p>
  </li>
  <li>
    <p>Added description to environments - #274</p>
    <pre><code class="perl"># Rexfile
desc "The live environment";
environment live => sub {};</code></pre>
  </li>
  <li>
    <p>Added <code>groups_dbi()</code> function to generate server groups from sql - #346 - Jean-Marie RENOUARD</p>
  </li>
  <li>
    <p>Added <code>groups_yaml()</code> function to generate server groups from yaml file - Jean-Marie RENOUARD</p>
  </li>
  <li>
    <p>Add support for df on a given mount point - Simon Bertrang</p>
  </li>
  <li>
    <p>Added authentication to download() function. - #340</p>
    <pre><code class="perl">download "http://secured.location.tld/foo.tgz", "foo.tgz",
  user =&gt; "httpuser",
  password =&gt; "password";</code></pre>
  </li>
  <li>
    <p>Refactored tmp dir generation - FErki</p>
  </li>
</ul>



<!-- end -->
