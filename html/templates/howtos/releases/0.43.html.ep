% layout 'default';
% title 'Release notes for 0.43';

% content_for header => begin
      <meta name="description" content="(R)?ex - manage all your boxes from a central point - Release notes">
      <meta name="keywords" content="Rex, API, Documentation">
% end
<h1><%= title %></h1>
<h1>Common</h1>
<h4>Inventory cache</h4>
<p>If you want to cache the inventory and to use this cache for subsequent rex calls, you can use the <em>REX_CACHE_TYPE</em> environment variable.</p>
<div class="btn btn-default copy-button pull-right" data-clipboard-target="clipboard0">Copy to clipboard</div>
<pre><code class="bash">REX_CACHE_TYPE=YAML rex $task
</code></pre>

<p>This will create a folder ".cache" and creates a separate cache file for each host. If you want to use a different folder you can set it in the <em>REX_CACHE_PATH</em> environment variable.</p>
<p>You can also set the cache type inside your <em>Rexfile</em></p>
<div class="btn btn-default copy-button pull-right" data-clipboard-target="clipboard0">Copy to clipboard</div>
<pre><code class="perl" id="clipboard1"># Rexfile

user "root";
password "...";
cache "YAML";
</code></pre>

<p>It is also possible to create custom cache classes. For example if you want to save the inventory cache inside a database. Just take a look at <a href="https://github.com/RexOps/Rex/blob/master/lib/Rex/Interface/Cache/YAML.pm">Rex::Interface::Cache::YAML</a> to see how it is implemented.</p>
<h4>Reporting of changes</h4>
<p>If you want to get a report of the changes Rex had done on your systems, you can use the new reporting feature.</p>
<p>Currently not every Rex function gets monitored by this feature, but all important ones are.
This feature will be extended with version 2 of rex.</p>
<p>To activate the reporting you can use the <em>REX_REPORT_TYPE</em> environment variable or use the <em>reporting</em> feature inside your <em>Rexfile</em>.</p>
<div class="btn btn-default copy-button pull-right" data-clipboard-target="clipboard1">Copy to clipboard</div>
<pre><code class="bash">REX_REPORT_TYPE=YAML rex the-task
</code></pre>

<p>Or, within the <em>Rexfile</em></p>
<div class="btn btn-default copy-button pull-right" data-clipboard-target="clipboard2">Copy to clipboard</div>
<pre><code class="perl" id="clipboard2"># Rexfile
use Rex -base;
report -on =&gt; "YAML";
</code></pre>

<p>The YAML report will be created inside a directory called <em>report</em>. If you want to use a different directory you can set it with a special variable.</p>
<div class="btn btn-default copy-button pull-right" data-clipboard-target="clipboard3">Copy to clipboard</div>
<pre><code class="perl" id="clipboard3">use Rex -base;
report -on =&gt; "YAML";
set report_path =&gt; "/path/to/";
</code></pre>

<p>It is also possible to create custom reporting classes. Just take a look at <a href="https://github.com/RexIO/rex-io-reports/blob/master/rex/lib/Rex/Report/RexIO.pm">Rex::Report::RexIO</a>.</p>
<h4>New CLI commands to better integrate Rex into your shell scripts</h4>
<p>With these commands it is easy to use Rex from within a shell script.</p>
<p>You can test these scripts by checking out the <a href="https://github.com/krimdomu/rex-shell-extension">krimdomu/rex-shell-extension</a> GitHub repository.</p>
<p>Login to fe01.my.lan and execute uptime</p>
<div class="btn btn-default copy-button pull-right" data-clipboard-target="clipboard4">Copy to clipboard</div>
<pre><code class="bash">#!/bin/bash
export REX_REMOTE_HOST="fe01.my.lan"
GROUPS=$(rex-run "id -Gn www-data")
for group in $GROUPS; do
    echo $group
done
</code></pre>

<p>Login to fe01.my.lan, testing if /etc/sudoers is there, and if not, install package and upload a template sudoers file</p>
<div class="btn btn-default copy-button pull-right" data-clipboard-target="clipboard4">Copy to clipboard</div>
<pre><code class="bash">#!/bin/bash
export REX_REMOTE_HOST="fe01.my.lan"

if ! rex-test -f /etc/sudoers; then
   rex-install sudo
   rex-template files/sudoers.tpl | rex-upload "/etc/sudoers"
fi
</code></pre>

<h4>Initial support for OpenWrt (FErki)</h4>
<p>In a limited way, Rex now supports OpenWrt.</p>
<h4>Enhancements</h4>
<ul>
<li>atomic uploads - #220</li>
</ul>
<p>rex will now only upload a file if it really changes and it will upload the file into a temporary file and rename it after the upload.</p>
<ul>
<li>setting options for OpenSSH connection mode</li>
</ul>
<div class="btn btn-default copy-button pull-right" data-clipboard-target="clipboard5">Copy to clipboard</div>
<pre><code class="perl" id="clipboard5">Rex::Config-&gt;set_openssh_opt(StrictHostKeyChecking =&gt; "no");
</code></pre>

<ul>
<li>set temporary directory - #166</li>
</ul>
<div class="btn btn-default copy-button pull-right" data-clipboard-target="clipboard6">Copy to clipboard</div>
<pre><code class="perl" id="clipboard6">user "foo";
password "b4r";
tmp_dir "/home/foo/tmp";

task "mytask", "myserver", sub {
};
</code></pre>

<ul>
<li>
<p>if a given feature flag isn't supported, Rex will now die() - #177</p>
</li>
<li>
<p>Rex now has an interface to support other shells than bash in a pluggable way. (Gnouc) - #180</p>
</li>
<li>
<p>Prefer ip command over ifconfig (ferki) - #194</p>
</li>
<li>
<p>Turn "eval your Rexfile" into a debug message (aowi) - #186</p>
</li>
<li>
<p>yum operations are now silent by default - #214</p>
</li>
<li>
<p>rexify command to use proxy settings - #213, #231 (ajaxhelios)</p>
</li>
<li>
<p>added another Red Hat Enterprise flavor - #231 (ajaxhelios)</p>
</li>
</ul>
<h4>Bugfixes</h4>
<ul>
<li>
<p>Support port with ranged hostnames - #196</p>
</li>
<li>
<p>Fixed bug in sync_up module if used in modules - #206</p>
</li>
<li>
<p>Fix a typo in example code - #195 Boris DÃ¤ppen</p>
</li>
<li>
<p>Zero values in crontab fields - #189 Ferenc Erki</p>
</li>
<li>
<p>zypper --no-gpg-checks option - #210</p>
</li>
</ul>
