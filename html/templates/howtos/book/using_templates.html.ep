% layout 'default';
% title 'The Rex Book / Using templates';

% content_for header => begin
      <meta name="description" content="Using templates">
      <meta name="keywords" content="Rex, templates">
% end

<h1>Using templates</h1>

<p>A template is a text file containing special variables or perl code inside it. So with this technique you can generate dynamic configuration files. For example if you want to configure apache only to listen on a special ethernet device (eth0 for example) templates are what you need.</p>

<p>The default template engine is a special Rex template engine. The syntax is a bit like php or erb. But you can use any template engine you want. Just browse <a href="#">cpan</a> and find one you like.</p>

<p>For example:</p>

<pre><code class="perl">Hello &lt;%= $name %&gt;!</code></pre>

<p>If $name contains "World" this template would result in the string <i>Hello World!</i>. This is very usefull if you have to maintain a large set of nearly identical configuration files.</p>

<h2>Working with a template</h2>

<p>First you have to create it</p>

<pre><code class="bash">$ mkdir files
$ vim files/my.cnf.tpl</code></pre>

<pre><code class="bash">[mysqld]
datadir                 = /var/lib/mysql
socket                  = /var/run/mysqld/mysqld.sock
user                    = mysql
# Disabling symbolic-links is recommended to prevent assorted security risks
symbolic-links          = 0
datadir                 = /var/lib/mysql
tmpdir                  = /tmp
skip-external-locking
max_allowed_packet      = 64M
thread_stack            = 192K
max_connections         = &lt;%= exists $conf-&gt;{"max_connections"} ? $conf-&gt;{"max_connections"} : "1000" %&gt;

max_connect_errors      = 1000
table_cache             = &lt;%= exists $conf-&gt;{"table_cache"} ? $conf-&gt;{"table_cache"} : "5000" %&gt;
table_open_cache        = &lt;%= exists $conf-&gt;{"table_open_cache"} ? $conf-&gt;{"table_open_cache"} : "5000" %&gt;
thread_concurrency      = 10

#
# ... and more ...
#</code></pre>


<p>Than you can reference on it from within your Rexfile.</p>

<pre><code class="perl">use Rex -feature =&gt; ['1.0'];

user "root";
key_auth;

group databases=&gt; "mydb01", "mydb02";

task "prepare_databases", group =&gt; "databases", sub {
   file "/etc/my.cnf",
      owner   =&gt; "root",
      group   =&gt; "root",
      mode    =&gt; "644",
      content =&gt; template("files/my.cnf.tpl", conf =&gt; {
                             max_connections =&gt; "500",
                             table_cache     =&gt; "2500",
                          });
};</code></pre>

<p>

<h2>Inline Templates</h2>

<p>
  When you want to deliver a rexfile that includes the templates, you can use inline templates.
  To use this feature, you have to use the <code>__DATA__</code> section of your rexfile. You
  can also define several templates in that section:
</p>

<strong>Using a single inline template</strong>
<pre><code>
use Rex -feature =&gt; ['1.0'];

task tempfiles =&gt; sub {
    file '/tmp/test.txt' =&gt;
        content =&gt; template(
            '@test',
            test =&gt; {
                author =&gt; 'reneeb',
                target =&gt; 'rex',
            },
        ),
        chmod =&gt; 644,
    ;
};

__DATA__
@test
This is a test written by &lt;%= $test->{author} %&gt;
for a project called &lt;%= $test->{target} %&gt;
@end
</code></pre>

<p>
  The <code>__DATA__</code> section is the last section of the Rexfile. The first parameter of the
  <code>template</code> method call gets the name of the inline template. Note that names of inline
  templates begin with <code>@</code>.
</p>

<p>
  Rex knows that it has to look up the template in the <code>__DATA__</code> section of the file
  where <code>template</code> was called. Within the section the template starts with its name (here:
  <code>@test</code>) and then follows the template text.
</p>

<strong>Using multiple inline templates</strong>
<pre><code>
use Rex -feature =&gt; ['1.0'];

task tempfiles =&gt; sub {
    file '/tmp/test.txt' =&gt;
        content => template(
            '@test',
            test =&gt; {
                author =&gt; 'reneeb',
                target =&gt; 'rex',
            },
        ),
        chmod =&gt; 644,
    ;

    file '/tmp/rex.txt' =&gt;
        content =&gt; template(&gt;
            '@rex',
            test =&gt; {
                author =&gt; 'krimdomu',
                target =&gt; 'rex',
            },
        ),
        chmod =&gt; 644,
    ;
};

__DATA__
@test
This is a test written by &lt;%= $test->{author} %&gt;
for a project called &lt;%= $test->{target} %&gt;
@end

@rex
Contribution by &lt;%= $test->{author} %&gt;
for a project called &lt;%= $test->{target} %&gt;
@end
</code></pre>

<p>
  Now we just look at the <code>__DATA__</code> section: You notice the token <code>@end</code>.
  This is used to separate the templates. At the end of each template (except for the last one)
  this token is needed. Otherwise Rex will use everything up to the first <code>@end</code> as
  the template which is most likely too much.
</p>

<hr><a href="/howtos/book.html">Table of Contents</a> </p>
