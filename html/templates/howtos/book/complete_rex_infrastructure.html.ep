% layout 'default';
% title 'The Rex Book / Complete Infrastructure Example';

% content_for header => begin
      <meta name="description" content="Complete infrastructure example">
      <meta name="keywords" content="Rex, code, infrastructure, module, management">
% end

<h1>管理你的 Rex 代码</h1>

<p>代码的可管理性和重用性严重依赖于选择正确的架构和工具。
  本节我将演示如何设置和设计你自己的项目来达成这个目标。</p>

<p>本节中的代码你都可以在 github 上获取。</p>

<ul>
  <li><a href="https://github.com/krimdomu/service-frontend">服务 (前端服务示例)</a></li>
  <li><a href="https://github.com/krimdomu/rex-os-base">用来配置操作系统的基础示例模块</a></li>
  <li><a href="https://github.com/krimdomu/rex-ntp-base">NTP 模块示例</a></li>
</ul>

<h1>Rex 构建服务第一步</h1>

<p>如果你管理着一个有多种服务和复杂架构的大规模环境，那么尽量将你的代码设计成可重用的模式，这一点非常重要。
要做到这点，你可能需要遵守下面几条简单的规则。</p>

<ul>
<li>使用源码控制系统，比如 git 。</li>
<li>给你架构中的每个部分都设计成模块。要有一个叫 <b>generic</b>，而且<b>不包含</b>任何和项目有关的逻辑与配置的模块。比如只管理 apache 或者 ntp。</li>
<li>通过多个模块关联来构建服务。服务需要包含构建项目所需要的<b>所有特定信息</b>。</li>
<li>每个模块和服务的代码都要放置在分离的代码库里。这样便于管理你的架构。你可以在分支层面创建服务和模块之间的依赖关系。</li>
<li>使用 CMDB 来分离代码和配置。</li>
</ul>

<h2>源码控制系统</h2>

<p>目前 Rex 只支持 *git* 方式管理模块和服务的仓库。所以本例中我也会使用 git。</p>
<p>管理 git 仓库本身，我建议使用像 <a href="https://github.com/yuki-kimoto/gitprep">Gitprep</a> 或者 <a href="https://www.gitlab.com/">Gitlab</a> 之类的工具。</p>

<h2>模块</h2>

<p>像之前提到的那样，你需要分离你的代码。不管从可读性、可用性还是可管理性来说这都是很重要的。</p>

<p>Modules must be generic. The modules are a bit like lego blocks. You can use lego blocks to build houses, ships, airplanes and much more. But the blocks are always the same.</p>

<h2>Services</h2>

<p>Services are a collection of modules. A service describe the system you want to build out of your module blocks.</p>

<h2>CMDB</h2>

<p>Rex has a default CMDB build upon YAML files. Store all the service relevant configuration options inside your YAML file. If you do this you can be sure that your code will work even if you change something in the CMDB.</p>

<h1>Example frontend service</h1>

<p>This is an example rex service.</p>

<h2>meta.yml - Define dependencies</h2>

<p>In the <b>meta.yml</b> file you can define some service information. The most important ones are the dependencies.</p>

<p>You can define dependencies to Rex modules and to Perl modules.</p>

<pre><code class="yaml">Name: Frontend Service
Description: The frontend service
Author: jan gehring <jan.gehring@gmail.com>
License: Apache 2.0
Require:
  Rex::NTP::Base:
    git: https://github.com/krimdomu/rex-ntp-base.git
    branch: master
  Rex::OS::Base:
    git: https://github.com/krimdomu/rex-os-base.git
    branch: master
PerlRequire:
  - Moo</code></pre>
<p>In this file you see that we define some dependencies to custom Rex modules located in git repositories.
The <code>rexify --resolve-deps</code> command will read the <b>meta.yml</b> file and download all these dependencies into the <b>lib</b> directory.</p>

<p>With this in mind it is easy to have multiple environments with the same service pointing to different development branches.</p>


<h2>Rexfile - The code</h2>

<p>Every service has its own <b>Rexfile</b>.</p>

<h3>Load all required modules</h3>

<pre><code class="perl">use Rex -feature =&gt; ['1.0'];
use Rex::CMDB;
use Rex::Test;
use Rex::Group::Lookup::INI;</code></pre>

<p>These lines loads all required modules.</p>

<ul>
  <li>Line <b>1</b>: Load the basic Rex functions and enable all features from version 1.0 and above.</li>
<li>Line <b>2</b>: Load the CMDB functions.</li>
<li>Line <b>3</b>: Load the Rex::Test suite. With this you can test your Rex code with local virtual box virtual machines.</li>
<li>Line <b>4</b>: Load the function to read Rex groups from ini files.</li>
</ul>


<h3>Load the server groups</h3>

<pre><code class="perl">groups_file "server.ini";</code></pre>

<p>Load all server groups from the file <b>server.ini</b>.</p>

<h3>Configure the CMDB</h3>

<pre><code class="perl">set cmdb =&gt; {
  type =&gt; "YAML",
  path =&gt; [
    "cmdb/{operatingsystem}/{hostname}.yml",
    "cmdb/{operatingsystem}/default.yml",
    "cmdb/{environment}/{hostname}.yml",
    "cmdb/{environment}/default.yml",
    "cmdb/{hostname}.yml",
    "cmdb/default.yml",
  ],
};</code></pre>

<p>Configure the CMDB. Here we define a custom search path. This will tell the CMDB to lookup the keys in the following order:</p>

<ul>
<li>cmdb/{operatingsystem}/{hostname}.yml</li>
<li>cmdb/{operatingsystem}/default.yml</li>
<li>cmdb/{environment}/{hostname}.yml</li>
<li>cmdb/{environment}/default.yml</li>
<li>cmdb/{hostname}.yml</li>
<li>cmdb/default.yml</li>
</ul>

<p>It is possible to use every <b>Rex::Hardware</b> variable inside the path.</p>

<ul>
<li>environment (the environment defined by cli parameter <b>-E</b>)</li>
<li>server (the server name used to connect to the server)</li>
<li>kernelversion</li>
<li>kernelrelease</li>
<li>hostname</li>
<li>operatingsystem</li>
<li>operatingsystemrelease</li>
<li>architecture</li>
<li>domain</li>
<li>eth0_mac</li>
<li>eth0_ip</li>
<li>manufacturer</li>
<li>eth0_broadcast</li>
<li>eth0_netmask</li>
<li>and some others, too.</li>
</ul>

<h3>Include all required Rex modules</h3>

<pre><code class="perl">include qw/
  Rex::OS::Base
  Rex::NTP::Base
  /;</code></pre>

<p>Include all needed Rex modules. With <b>include</b> all the tasks inside these modules won't get displayed with <b>rex -T</b>.</p>

<h3>The main task</h3>

<pre><code class="perl">task "setup",</code></pre>


<p>The main task.  If you don't define the servers (or groups) in the task definition you can use the cli paramter <b>-G</b> or <b>-H</b>.</p>


<pre><code class="perl">task "setup", group =&gt; "frontend",</code></pre>

<p>It is also possible to define the server or group to connect to.</p>


<pre><code class="perl">make {
  # run setup() task of Rex::OS::Base module
  Rex::OS::Base::setup();

  # run setup() task of Rex::NTP::Base module
  Rex::NTP::Base::setup();
};</code></pre>

<p>Inside the task we just call the tasks from the modules we have included above. All tasks can be called as a normal perl function, as long as the taskname doesn't conflict with other perl functions.</p>


<h3>The last line</h3>

<pre><code class="perl"># the last line of a Rexfile
1;</code></pre>

<p>The last line of a Rexfile is normaly a true value. This is not always needed, but it is safer to include it.</p>


<h2>Test before ship</h2>

<p>Since version 0.46 Rex comes with a integration test suite. It is based on <b>Rex::Box</b> and currently supports VirtualBox. With it you can spawn local Virtual Box VMs and test your tasks on it.</p>

<p>The tests are stored in the <b>t</b> directory.</p>

<h3>Example t/base.t test file</h3>

<pre><code class="perl">use Rex::Test::Base;
use Rex -feature =&gt; ['1.0'];</code></pre>

<p>Load the <b>Rex::Test::Base</b> framework and the Rex basic commands.</p>

<pre><code class="perl">test {
  my $t = shift;

  $t-&gt;name("ubuntu test");</code></pre>

<p>Create a new test named <b>ubuntu test</b>. For every test Rex will create a new vm.</p>


<pre><code class="perl">  $t-&gt;base_vm("http://box.rexify.org/box/ubuntu-server-12.10-amd64.ova");
  $t-&gt;vm_auth(user => "root", password => "box");</code></pre>

<p>Define the url where to download the base VM image and the authentication.</p>

<pre><code class="perl">$t-&gt;run_task("setup");</code></pre>

<p>Define which task to run on the VM.</p>

<pre><code class="perl">  $t-&gt;has_package("vim");
  $t-&gt;has_package("ntp");
  $t-&gt;has_package("unzip");

  $t-&gt;has_file("/etc/ntp.conf");

  $t-&gt;has_service_running("ntp");

  $t-&gt;has_content("/etc/passwd", qr{root:x:0:}ms);

  run "ls -l";
  $t-&gt;ok($? == 0, "ls -l returns success.");</code></pre>


<p>Run the tests. You can also use normal rex functions here.</p>

<p>At the end finish the tests with:</p>

<pre><code class="perl">  $t->finish;
};

1;</code></pre>


<p>You can now run the tests with <code>rex Test:run</code>.</p>

<h2>Getting the code</h2>

<p>Now, when you all have commit to your git repository you can use the <b>rexify</b> command to download them to (for example) a central deployment server.</p>

<pre><code class="bash">rexify --init=<a href="https://github.com/krimdomu/service-frontend">https://github.com/krimdomu/service-frontend.git</a></code></pre>

<p>This will download everything into the folder <b>service-frontend</b>. The command also takes care of all dependencies and download them also into the <b>lib</b> folder.</p>


<p><hr><a href="/howtos/book.html">Table of Contents</a> </p>

<!-- end -->
