% layout 'default';
% title 'The Rex Book / Using Environments';

% content_for header => begin
      <meta name="description" content="Using environments">
      <meta name="keywords" content="Rex, Environments, Stage, Live, Prelive, integration">
% end

<h1>Using Environments</h1>

<p>With environments it is easy to group your servers depending on the maturity of your configuration or your code.</p>

<p>You can create environments for <i>dev</i>, <i>staging</i> and <i>production</i> machines. There is no limit for environments, so you can create as much as you need.</p>

<p>
  The classic way is to have 3 environments. The development environment for
  integration tests, mostly with fewest machines. The staging environment,
  mostly with the same resource
  layers as production. And the production environment.
  </p>

<p><img src="/img/book_env.png" /></p>

<h2>Creating Environments</h2>

<p>Creating environments is as easy as creating groups. To create environments you can use the <i>environment</i> function. Inside an environment you can place everything that is specific for this environment (like authentication, server groups, tasks, ...).</p>

<pre><code class="perl"># Rexfile
use Rex -base;

environment test =&gt; sub {
  user "root";
  password "b0x";

  group frontend   =&gt; "fe01.test";
  group middleware =&gt; "mw01.test";
  group dbwrite    =&gt; "dbm01.test";
};

environment stage =&gt; sub {
  user "root";
  password "b0xst4g3";

  group loadbalancer =&gt; "lb01.stage";
  group frontend     =&gt; "fe01.stage";
  group middleware   =&gt; "mw01.stage";
  group dbread       =&gt; "dbs01.stage";
  group dbwrite      =&gt; "dbm01.stage";
};

environment live =&gt; sub {
  user "admin";
  password "b0xl1v3";
  sudo_password "b0xl1v3";
  sudo TRUE;

  group loadbalancer =&gt; "lb[01..02].live";
  group frontend     =&gt; "fe[01..03].live";
  group middleware   =&gt; "mw[01..02].live";
  group dbread       =&gt; "dbs[01..02].live";
  group dbwrite      =&gt; "dbm01.live";
};</code></pre>

<h2>Running tasks</h2>

<p>To run the task inside a special environment you have to use the cli option <i>-E</i></p>
<pre><code class="bash">$ rex -E stage $task</code></pre>

<p>If you need to configure systems depending on the environment you can get the current environment inside a task with the <i>environment</i> function.</p>
<pre><code class="perl"># Rexfile
task "prepare", group =&gt; "frontend", make {
  # configure ntp.conf depending on the environment
  my $ntp_server = case environment, {
                     test    => ["ntp01.test"],
                     stage   => ["ntp01.stage"],
                     live    => ["ntp01.live", "ntp02.live"],
                     default => ["ntp01.test"],
                   };

  file "/etc/ntp.conf",
    content   => template("templates/etc/ntp.conf", ntp_server => $ntp_server),
    owner     => "root",
    group     => "root",
    mode      => 644,
    on_change => make { service ntpd => "restart"; };
};
</code></pre>

<h2>Environments and the CMDB</h2>

<p>If you're using a CMDB to separate data from code you can also create YAML files for the different environments.</p>
<p>The lookup path for the default YAML CMDB is as follow:</p>
<ol>
  <li>$server.yml</li>
  <li>$environment/$server.yml</li>
  <li>$environment/default.yml</li>
  <li>default.yml</li>
</ol>

<h3>The YAML files</h3>

<pre><code class="yaml"># File: cmdb/default.yml
ntp_server:
  - ntp01.test</code></pre>

<pre><code class="yaml"># File: cmdb/test/default.yml
ntp_server:
  - ntp01.test</code></pre>

<pre><code class="yaml"># File: cmdb/stage/default.yml
ntp_server:
  - ntp01.stage</code></pre>

<pre><code class="yaml"># File: cmdb/live/default.yml
ntp_server:
  - ntp01.live
  - ntp02.live</code></pre>

<h3>The Rexfile</h3>

<p>To use the CMDB you have to require and configure the <i>Rex::CMDB</i> module first.</p>

<pre><code class="perl"># Rexfile
use Rex -feature =&gt; ['0.45'];
use Rex::CMDB;

set cmdb =&gt; {
  type =&gt; "YAML",
  path =&gt; "./cmdb",
};

task "prepare", group =&gt; "frontend", make {
  # configure ntp.conf depending on the environment
  my $ntp_server = get cmdb "ntp_server";

  file "/etc/ntp.conf",
    content   => template("templates/etc/ntp.conf", ntp_server => $ntp_server),
    owner     => "root",
    group     => "root",
    mode      => 644,
    on_change => make { service ntpd => "restart"; };
};</code></pre>


<p>Now you can run the task with <code>rex -E test prepare</code>.</p>

<p><hr><a href="/howtos/book.html">Table of Contents</a> </p>
