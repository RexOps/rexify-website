% layout 'default';
% title 'Howto write an own cloud provider';

% content_for header => begin
      <meta name="description" content="Write an own cloud provider for Rex">
      <meta name="keywords" content="Rex, Cloud, Provider, API">
% end

<h1>Write an own Cloud Provider</h1>

<p>If you want to write an own cloud provider for Rex your module have to fullfill some interface requirements. For a working reference you can checkout the <a href="https://github.com/krimdomu/rex-recipes/blob/0.36/Rex/Cloud/OpenNebula/CloudLayer.pm">OpenNebula</a> module.</p>



<h2>Creating the Class</h2>
<p>First you have to create your class. Your class have to be derived from Rex::Cloud::Base.</p>

<pre><code class="perl">package Your::Cloud::Provider;
   
use strict;
use warnings;

use Rex::Logger;
use Rex::Cloud::Base;

use base qw(Rex::Cloud::Base);
   
sub new {
   my $that = shift;
   my $proto = ref($that) || $that;
   my $self = { @_ };

   bless($self, $proto);

   return $self;
}</code></pre>


<h3>Choosing a Region</h3>
<p>Some Cloud providers (like Amazon) let you choose a region where to manage your cloud instances. The Rex Cloud function for this is <i>cloud_region()</i>. This function will call the <i>set_endpoint()</i> method of the Cloud Provider's Class.</p>


<p>So, if you're Cloud Provider has the ability to choose different regions you have to define the <i>set_endpoint()</i> method.</p>

<p>The default <i>set_enpoint()</i> method just stores the first parameter into <i>$self-&gt;{__endpoint}</i>.</p>

<p>For example for the OpenNebula Module it sets the location of the OpenNebula RPC url.</p>

   <pre><code class="perl">sub set_endpoint {
   my ($self, $endpoint) = @_;
   $self-&gt;{__endpoint} = $endpoint;
}</code></pre>




<h3>Authentication</h3>
<p>Every Cloud Provider use different authentication methods. So you have to define a method <i>set_auth()</i> to store the authentication parameters that you want to use for every call against the Cloud API.</p>

<p>For example the Amazon API needs an Access Key and a Secret Access Key. The OpenNebula RPC Interface needs an username and a password.</p>
<pre><code class="perl">sub set_auth {
   my ($self, $user, $password) = @_;
   $self-&gt;{__user}     = $user;
   $self-&gt;{__password} = $password;
}</code></pre>



<h3>Listing available Operating Systems</h3>

<p>If your Cloud Provider supports the listing of available Operating Systems you can define a method called <i>list_operating_systems()</i>. This method should return an array of hashes.</p>


<p>The Hashes shoud contain at least a <i>name</i> and an <i>id</i>.</p>


<p>For example, the following code block shows the <i>list_operating_systems()</i> method from the OpenNebula Cloud provider.</p>

<pre><code class="perl">sub list_operating_systems {
   my ($self) = @_;
   my @templates = $self-&gt;_one-&gt;get_templates();
   my @ret = ();

   for my $tpl (@templates) {
      push(@ret, { name =&gt; $tpl-&gt;name, id =&gt; $tpl-&gt;id });
   }

   return @ret;
}</code></pre>


<h3>Listing Instances</h3>

<p>To list your instances you have to define a method named <i>list_instances()</i>. This method should return all instances available to the user. If you only want to list running instances there is also a method called <i>list_running_instances()</i>.</p>


<p>Both methods have to return an array of hashes. The hashes should contain at least an <i>id</i>, an <i>ip</i> to connect to via ssh and a <i>state</i>. The <i>state</i> key should contain <i>running</i> (if the instance is running) or <i>stopped</i> (if the instance is stopped). It can also contain other states if the Cloud Provider supports it.</p>


<p>For example the next code block shows the 2 methods from the OpenNebula Cloud provider.</p>

<pre><code class="perl">sub list_instances {
   my ($self) = @_;
   my @ret = ();
   my @vms = $self-&gt;_one-&gt;get_vms;

   for my $vm (@vms) {
      my @nics = $vm-&gt;nics;
      my $ip   = $nics[0]-&gt;ip;

      push(@ret, {
         id      =&gt; $vm-&gt;id,
         ip      =&gt; $ip,
         name    =&gt; $vm-&gt;name,
         state   =&gt; $vm-&gt;state,
         architecture =&gt; $vm-&gt;arch,
      });
   }

   return @ret;
}

sub list_running_instances { 
   my ($self) = @_;
   return grep { $_-&gt;{"state"} eq "running" } $self-&gt;list_instances();
}</code></pre>


<h3>Creating a new Instance</h3>

<p>To create a new instance you have to add the method <i>run_instance(%data)</i>. This method should return a hashRef of the instance information after the instance has created and started.</p>

<p>The next code block shows this method from the OpenNebula provider.</p>

<pre><code class="perl">sub run_instance {
   my ($self, %data) = @_;
   my $image_id   = $data{image_id};
   my $name = $data{name};

   if(! $name) {
      die("You have to define a name.");
   }

   if(! $image_id)) {
      die("You have to define a image_id");
   }

   my $vm = $self-&gt;_one-&gt;create_vm(
      name     =&gt; $name,
      template =&gt; $image_id,
   );

   # waiting until the instance has been created and started.
   my $state = $vm-&gt;state;
   while($state ne "running") {
      sleep 5; # wait 5 seconds for the next request
      $state = $vm-&gt;state;
   }

   my @nics = $vm-&gt;nics;
   my $ip   = $nics[0]-&gt;ip; # get the ip of the first device

   sleep 5; # wait a few seconds to give the os time to boot

   return {
      id    =&gt; $vm-&gt;id,
      ip    =&gt; $ip,
      name  =&gt; $vm-&gt;name,
      state =&gt; $vm-&gt;state,
      architecture =&gt; $vm-&gt;arch,
   };
}</code></pre>



<h3>Stopping an  Instance</h3>

<p>There are 2 ways to stop an instance: <i>stop</i> and <i>terminate</i>. The first one should stop the instance but don't delete it. So it is possible to start the instance when it is needed again.</p>. The method name for this is <i>stop_instance()</i>.</p>


<p>The next code block shows the method from the OpenNebula Cloud provider.</p>

<pre><code class="perl">sub stop_instance {
   my ($self, %data) = @_;
   $self-&gt;_one-&gt;get_vm($data{instance_id})-&gt;stop;
}</code></pre>



<h3>Terminating an  Instance</h3>

<p>This method should stop an instance and remove it. The method name for this is <i>terminate_instance()</i></p>

<p>The next code block shows the method from the OpenNebula Cloud provider.</p>

<pre><code class="perl">sub terminate_instance {
   my ($self, %data) = @_;
   $self-&gt;_one-&gt;get_vm($data{instance_id})-&gt;shutdown;
}</code></pre>





<h3>Starting an  Instance</h3>

<p>To start a stopped instance you have to define a method named <i>start_instance()</i>.</p>


<p>The next code block shows the method from the OpenNebula Cloud provider.</p>

<pre><code class="perl">sub start_instance {
   my ($self, %data) = @_;
   $self-&gt;_one-&gt;get_vm($data{instance_id})-&gt;resume;
}</code></pre>



<h3>Registering your Cloud Provider</h3>
<p>At last you have to register your Cloud Provider to Rex. For this you have to call <i>Rex::Cloud-&gt;register_cloud_service($yourhandle =&gt; "Your::Cloud::Provider")</i></p>

<p>You can just add this line to the end of your Class. (Just before the finishing "1;")</p>

   <pre><code class="perl">Rex::Cloud-&gt;register_cloud_service(yourhandle =&gt; __PACKAGE__);</code></pre>


<h2>Using your Cloud Provider</h2>
<p>To use your Cloud Provider within your Rexfiles just copy it into your <i>lib</i> directory and <i>use</i> it:</p>
   <pre><code class="perl">use Your::Cloud::Provider;

cloud_service "$yourhandle";
cloud_auth "user", "password";
# ...</code></pre>
