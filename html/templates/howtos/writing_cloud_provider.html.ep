% layout 'default';
% title '如何写自己的云供应层';

% content_for header => begin
      <meta name="description" content="Write an own cloud provider for Rex">
      <meta name="keywords" content="Rex, Cloud, Provider, API">
% end

<h1>写自己的云供应层</h1>

<p>如果你想为 Rex 写一个自己的云供应层，你的模块必须满足一些接口要求。作为一个示例，你可以检出 <a href="https://github.com/krimdomu/rex-recipes/blob/0.36/Rex/Cloud/OpenNebula/CloudLayer.pm">OpenNebula</a> 模块作为参考。</p>



<h2>创建类</h2>
<p>首先你要创建你的类。而且你的类必须继承自 Rex::Cloud::Base 类。</p>

<pre><code class="perl">package Your::Cloud::Provider;
   
use strict;
use warnings;

use Rex::Logger;
use Rex::Cloud::Base;

use base qw(Rex::Cloud::Base);
   
sub new {
   my $that = shift;
   my $proto = ref($that) || $that;
   my $self = { @_ };

   bless($self, $proto);

   return $self;
}</code></pre>


<h3>选择区域范围</h3>
<p>有些云服务商(比如亚马逊)会让你选择你要管理的云实例的区域范围。Rex 里为这个准备的函数是 <i>cloud_region()</i>。这个函数会调用云供应商类的 <i>set_endpoint()</i> 方法。</p>


<p>所以，如果你的云提供商有能力选择不同的区域，你就得定义好 <i>set_endpoint()</i> 方法。</p>

<p>默认的 <i>set_enpoint()</i> 方法就是把第一个参数存进 <i>$self-&gt;{__endpoint}</i> 里。</p>

<p>比如在 OpenNebula 模块里，它设置 OpenNebula 的 RPC url 地址：</p>

   <pre><code class="perl">sub set_endpoint {
   my ($self, $endpoint) = @_;
   $self-&gt;{__endpoint} = $endpoint;
}</code></pre>




<h3>认证</h3>
<p>每个云服务商都有不同的认证方式。所以你必须定义 <i>set_auth()</i> 方法来存储认证参数。你的每次云 API 调用都会用得到。</p>

<p>比如亚马逊的 API 就需要一个 Access Key 和一个 Secret Access Key。而 OpenNebula RPC 接口则需要用户名和密码。</p>
<pre><code class="perl">sub set_auth {
   my ($self, $user, $password) = @_;
   $self-&gt;{__user}     = $user;
   $self-&gt;{__password} = $password;
}</code></pre>



<h3>列出可用的操作系统</h3>

<p>如果你的云服务商支持列出可用的操作系统，你可以定义一个叫做 <i>list_operating_systems()</i> 的方法。这个防范应该返回一个由哈希组成的数组。</p>


<p>这个哈希必须包含至少一个 <i>name</i> 和一个 <i>id</i>。</p>


<p>比如，下马这段代码就是 OpenNebula 云供应层类里的 <i>list_operating_systems()</i> 方法。</p>

<pre><code class="perl">sub list_operating_systems {
   my ($self) = @_;
   my @templates = $self-&gt;_one-&gt;get_templates();
   my @ret = ();

   for my $tpl (@templates) {
      push(@ret, { name =&gt; $tpl-&gt;name, id =&gt; $tpl-&gt;id });
   }

   return @ret;
}</code></pre>


<h3>列出实例</h3>

<p>要列出你的实例，你必须定义一个叫 <i>list_instances()</i> 的方法。这个方法应该返回对用户可用的全部实例。如果你只想列出在运行状态的实例，有另一个方法叫 <i>list_running_instances()</i>。</p>


<p>这两个方法都必须返回由哈希组成的数组。哈希要求包含至少一个 <i>id</i>, 一个 <i>ip</i> 用以 ssh 连接，以及一个 <i>state</i>。这个 <i>state</i> 应该有 <i>running</i> (如果实例在运行)或者 <i>stopped</i> (如果实例停止了)。如果你的云服务商有提供其他状态，那也能包含其他状态。</p>


<p>比如下面这段代码就是 OpenNebula 云供应层类的这 2 个方法：</p>

<pre><code class="perl">sub list_instances {
   my ($self) = @_;
   my @ret = ();
   my @vms = $self-&gt;_one-&gt;get_vms;

   for my $vm (@vms) {
      my @nics = $vm-&gt;nics;
      my $ip   = $nics[0]-&gt;ip;

      push(@ret, {
         id      =&gt; $vm-&gt;id,
         ip      =&gt; $ip,
         name    =&gt; $vm-&gt;name,
         state   =&gt; $vm-&gt;state,
         architecture =&gt; $vm-&gt;arch,
      });
   }

   return @ret;
}

sub list_running_instances { 
   my ($self) = @_;
   return grep { $_-&gt;{"state"} eq "running" } $self-&gt;list_instances();
}</code></pre>


<h3>创建新实例</h3>

<p>要创建新实例，你必须添加 <i>run_instance(%data)</i> 方法。这个方法应该在实例创建和启动后返回一个包含有实例信息的哈希引用。</p>

<p>下面这段代码是从 OpenNebula 供应层摘出的这个方法：</p>

<pre><code class="perl">sub run_instance {
   my ($self, %data) = @_;
   my $image_id   = $data{image_id};
   my $name = $data{name};

   if(! $name) {
      die("You have to define a name.");
   }

   if(! $image_id)) {
      die("You have to define a image_id");
   }

   my $vm = $self-&gt;_one-&gt;create_vm(
      name     =&gt; $name,
      template =&gt; $image_id,
   );

   # waiting until the instance has been created and started.
   my $state = $vm-&gt;state;
   while($state ne "running") {
      sleep 5; # wait 5 seconds for the next request
      $state = $vm-&gt;state;
   }

   my @nics = $vm-&gt;nics;
   my $ip   = $nics[0]-&gt;ip; # get the ip of the first device

   sleep 5; # wait a few seconds to give the os time to boot

   return {
      id    =&gt; $vm-&gt;id,
      ip    =&gt; $ip,
      name  =&gt; $vm-&gt;name,
      state =&gt; $vm-&gt;state,
      architecture =&gt; $vm-&gt;arch,
   };
}</code></pre>



<h3>停止一个实例</h3>

<p>有 2 种办法停止一个实例：<i>stop</i> 和 <i>terminate</i>。前一个只是停止实例而不会删除它。有需要的时候就可以重新启动起来。这个办法的方法名叫 <i>stop_instance()</i>。</p>


<p>下面这段代码是从 OpenNebula 供应层摘出的这个方法：</p>

<pre><code class="perl">sub stop_instance {
   my ($self, %data) = @_;
   $self-&gt;_one-&gt;get_vm($data{instance_id})-&gt;stop;
}</code></pre>



<h3>终止一个实例</h3>

<p>这个方法会停止一个实例并删除它。这个方法的名字叫 <i>terminate_instance()</i>。</p>

<p>下面这段代码是从 OpenNebula 供应层摘出的这个方法：</p>

<pre><code class="perl">sub terminate_instance {
   my ($self, %data) = @_;
   $self-&gt;_one-&gt;get_vm($data{instance_id})-&gt;shutdown;
}</code></pre>





<h3>运行一个实例</h3>

<p>要启动一个已停止的实例，你要定义一个叫 <i>start_instance()</i> 的方法。</p>


<p>下面这段代码是从 OpenNebula 供应层摘出的这个方法：</p>

<pre><code class="perl">sub start_instance {
   my ($self, %data) = @_;
   $self-&gt;_one-&gt;get_vm($data{instance_id})-&gt;resume;
}</code></pre>



<h3>注册你的云供应层</h3>
<p>最后你需要把你的云供应层注册到 Rex 里。这需要你调用 <i>Rex::Cloud-&gt;register_cloud_service($yourhandle =&gt; "Your::Cloud::Provider")</i>。</p>

<p>你只需要把这行代码加到类的最后就行了。(也就是在结束的"1;"前面)</p>

   <pre><code class="perl">Rex::Cloud-&gt;register_cloud_service(yourhandle =&gt; __PACKAGE__);</code></pre>


<h2>使用你的云供应层</h2>
<p>要在 Rexfile 里使用你的云供应层，只需要复制它到你的 <i>lib</i> 目录然后 <i>use</i> 它：</p>
   <pre><code class="perl">use Your::Cloud::Provider;

cloud_service "$yourhandle";
cloud_auth "user", "password";
# ...</code></pre>
