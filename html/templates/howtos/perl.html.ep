% layout 'default';
% title 'Just enough Perl for Rex - A small howto';

% content_for header => begin
      <meta name="description" content="(R)?ex - manage all your boxes from a central point - Perl Howto">
      <meta name="keywords" content="Perl, Howto, Rex">
% end 

         <h1>Rex 需要的 Perl 基础</h1>

         <p>Perl是一种脚本语言设计让困难的事情更加的简单易行。本指南中你就可以学会足够书写自己的 Rex 任务的 Perl 知识。</p>
         
         <p>如果你有什么建议和想法，请发表评论，或者在 <a href="irc://irc.freenode.net/rex">freenode 的 #rex 频道</a>上告诉我们，或者直接通过<a href="https://github.com/RexOps/rexify-website">GitHub repository</a> 发 pull request。</p>

         <h2>变量</h2>
         <h3>标量变量</h3>
         <p>标量可以包含字符串、数字、对象、引用.</p>
            <pre><code class="perl">my $name = "John";    # this is a string
my $age = 28;   # this is a number (integer)
my $float = 28.5;   # also a number, but a float
my $car = Car-&gt;new();   # this is an object from the class Car</code></pre>

         <h3>数组变量</h3>
         <p>数组列表。像一个购物清单。他们包含了很多的标量.</p>
            <pre><code class="perl">my @names = ("John", "Fred", "Charley");
my @to_buy = qw(Cheese Butter Salt Lemons Oranges Apples);</code></pre>
         
         <p>访问数组元素必须使用索引。索引是从零开始的:</p>
            <pre><code class="perl">say "First name: " . $names[0];
say "Last name: " . $name[2];
say "Also last name: " . $name[-1];</code></pre>
         
         <p>分割字符串成数组:</p>

            <pre><code class="perl">my $string = "John,Fred,Carl,Lewis";
my @names = split(/,/, $string);</code></pre>

         <p>把数组连接成一个字符串:</p>

            <pre><code class="perl">my @names = ("John", "Fred", "Carl", "Lewis");
my $string = join(",", @names);     # -&gt; John,Fred,Carl,Lewis</code></pre>
         
         <p>如果你想遍历一个数组，这样做:</p>
            <pre><code class="perl">for my $name (@names) {
   say "Current name: $name";
}</code></pre>

         <h3>哈希变量</h3>
         <p>hashs 比较像数组，但是它有着命名的索引，一般叫做键。</p>
            <pre><code class="perl">my %person = (
   name =&gt; "John",
   age  =&gt; 28,
   city =&gt; "New York"
);
</code></pre>

         <p>访问一个hash 必须用key:</p>

            <pre><code class="perl">say "Name: " . $person{"name"};
say "Age: " . $person{"age"};
say "City: " . $person{"city"};</code></pre>

         <p>如果你遍历hash 可以这样做. 但是没有排序.</p>
            <pre><code class="perl">for my $key ( keys %person ) {
   say "key: $key -&gt; value: " . $person{$key};
}</code></pre>
         
         <h2>条件语句</h2>
            <pre><code class="perl">if ( $name eq "John" ) {
   say "Hello, my name is John!";
} else {
   say "Well, my name is not John...";
}

if ( $name ne "John" ) {
   say "Yes, my name is NOT John...";
} else {
   say "Hello, my name is John!";
}

if ( $age &lt; 30 ) {
   say "I'm younger than 30.";
} elsif ( $age &gt;= 30 &amp;&amp; $age &lt;= 50 ) {
   say "Well, I'm between 30 and 50.";
} else {
   say "I'm older than 50.";
} </code></pre>
         
         <h2>循环</h2>
            <pre><code class="perl">for my $num (1..5) {
   say "&gt; $num";
}

# looping over an array
for my $item (@array) {
   say "&gt; $item";
} </code></pre>

         <h2>正则表达式</h2>
            <pre><code class="perl">my $name = "John";
if ( $name =~ m/john/ ) {     # will not match, because the "J" in $name is uppercase
}

if ( $name =~ m/john/i ) {    # _will_ match, because we use the "i" modifier for case-insensitive matching
}

$name =~ s/john/Fred/i;       # this will replace the first match of "john" (regardless of its case) with "Fred"
$name =~ s/john/Fred/ig;      # this will replace all matches of "john" (regardless of its case) with "Fred"</code></pre>
         
         <h2>函数</h2>
            <pre><code class="perl">sub my_function {      # define the function called "my_function"
}

sub my_function {      # define the function called "my_function" 
   my $param1 = $_[0]; # get the 1st parameter and save it in $param1
   my $param2 = $_[1]; # get the 2nd parameter and save it in $param2
   my $param3 = $_[2]; # get the 3rd parameter and save it in $param3

}

sub my_function {
   my ($param1, $param2, $param3) = @_; # the same as above
}

my_function();     # call the function "my_function"
my_function;       # also calls "my_function"
&my_function;      # also calls "my_function"
my_function("john", 28);    # call "my_function" with 2 parameters
my_function "john", 28;     # also calls "my_function" with 2 parameters: the brackets are not needed</code></pre>

         <h2>辅助函数</h2>

         <p>打印一个列表上下文，数组，hash</p>
            <pre><code class="perl">use Data::Dumper;

say Dumper($scalar);
say Dumper(@array);
say Dumper(%hash);</code></pre>
