% layout 'default';
% title 'Rex::Commands - All the basic commands';

% content_for header => begin
      <meta name="description" content="这是一个核心命令模块。">
      <meta name="keywords" content="Rex, API, Documentation">
% end 


<!-- INDEX BEGIN -->
<div name="index">
<h1>目录</h1>

<ul>

        <li><a href="#name">名称</a></li>
        <li><a href="#description">摘要</a></li>
        <li><a href="#synopsis">例子</a></li>
        <li><a href="#commandlist">命令列表</a></li>
        <li><a href="#exported_functions">输出函数</a></li>
</ul>


</div>
<!-- INDEX END -->

<p>
</p>
<h2>名称</h2>
<p>Rex::Commands - 基本命令</p>
<p>
</p>

<h2>摘要</h2>
<p>这个模块是核心命令模块。</p>
<p>
</p>

<h2>例子</h2>
<pre><code class="perl">
 desc "Task description";
 
 task "taskname", sub { ... };
 task "taskname", "server1", ..., "server20", sub { ... };
 
 group "group" =&gt; "server1", "server2", ...;
 
 user "user";
 
 password "password";
    
 environment live =&gt; sub {
   user "root";
   password "foobar";
   pass_auth;
   group frontend =&gt; "www01", "www02";
 };</code></pre>
<p>
</p>

<h2>命令列表</h2>
<ul>
<li><strong>Cloud Management <a href="/api/Rex/Commands/Cloud.pm.html">Rex::Commands::Cloud</a></strong>

</li>
<li><strong>Cron Management <a href="/api/Rex/Commands/Cron.pm.html">Rex::Commands::Cron</a></strong>

</li>
<li><strong>Database Commands <a href="/api/Rex/Commands/DB.pm.html">Rex::Commands::DB</a></strong>

</li>
<li><strong>SCP Up- and Download <a href="/api/Rex/Commands/Upload.pm.html">Rex::Commands::Upload</a>, <a href="/api/Rex/Commands/Download.pm.html">Rex::Commands::Download</a></strong>

</li>
<li><strong>File Manipulation <a href="/api/Rex/Commands/File.pm.html">Rex::Commands::File</a></strong>

</li>
<li><strong>Filesystem Manipulation <a href="/api/Rex/Commands/Fs.pm.html">Rex::Commands::Fs</a></strong>

</li>
<li><strong>Information Gathering <a href="/api/Rex/Commands/Gather.pm.html">Rex::Commands::Gather</a></strong>

</li>
<li><strong>Manipulation of /etc/hosts <a href="/api/Rex/Commands/Host.pm.html">Rex::Commands::Host</a></strong>

</li>
<li><strong>Get an inventory of your Hardware <a href="/api/Rex/Commands/Inventory.pm.html">Rex::Commands::Inventory</a></strong>

</li>
<li><strong>Manage your iptables rules <a href="/api/Rex/Commands/Iptables.pm.html">Rex::Commands::Iptables</a></strong>

</li>
<li><strong>Kernel Commands <a href="/api/Rex/Commands/Kernel.pm.html">Rex::Commands::Kernel</a></strong>

</li>
<li><strong>LVM Commands <a href="/api/Rex/Commands/LVM.pm.html">Rex::Commands::LVM</a></strong>

</li>
<li><strong>Package Commands <a href="/api/Rex/Commands/Pkg.pm.html">Rex::Commands::Pkg</a></strong>

</li>
<li><strong>Process Management <a href="/api/Rex/Commands/Process.pm.html">Rex::Commands::Process</a></strong>

</li>
<li><strong>Rsync Files <a href="/api/Rex/Commands/Rsync.pm.html">Rex::Commands::Rsync</a></strong>

</li>
<li><strong>Run Remote Commands <a href="/api/Rex/Commands/Run.pm.html">Rex::Commands::Run</a></strong>

</li>
<li><strong>Manage System Services (sysvinit) <a href="/api/Rex/Commands/Service.pm.html">Rex::Commands::Service</a></strong>

</li>
<li><strong>Sysctl Commands <a href="/api/Rex/Commands/Sysctl.pm.html">Rex::Commands::Sysctl</a></strong>

</li>
<li><strong>Live Tail files <a href="/api/Rex/Commands/Tail.pm.html">Rex::Commands::Tail</a></strong>

</li>
<li><strong>Manage user and group accounts <a href="/api/Rex/Commands/User.pm.html">Rex::Commands::User</a></strong>

</li>
<li><strong>Manage your virtual environments <a href="/api/Rex/Commands/Virtualization.pm.html">Rex::Commands::Virtualization</a></strong>

</li>
</ul>
<p>
</p>

<h2>输出函数</h2>
<ul>
<li><strong>no_ssh([$task])</strong></li>


<p>在所有或者某个特定任务中禁用 ssh。</p>
<p>如果你想禁用ssh(可能你只想用libVirt)，你可以在 Rexfile 的主函数段中启用 no_ssh 。</p>
<pre><code class="perl">
 no_ssh;</code></pre>
<p>如果只想在某个任务中禁用ssh，你只需把 <em>no_ssh</em> 放在任务定义首行，如下：</p>
<pre><code class="perl">
 no_ssh task "mytask", "myserver", sub {
   say "Do something without a ssh connection";
 };</code></pre>

<li><strong>task($name [, @servers], $funcref)</strong></li>


<p>这个函数用于创建一个新任务.</p>
<ul>
<li><strong>创建一个本地任务(独立于服务器外的任务)</strong></li>


<pre><code class="perl">
 task "mytask", sub {
   say "Do something";
 };</code></pre>
<p>如果你直接调用 (R)?ex，任务会在本机上执行，而通过指定 <em>-H</em> 命令行参数，就可以在远程机器上执行任务.</p>

<li><strong>创建指定机器的任务。</strong></li>


<pre><code class="perl">
 task "mytask", "server1", sub {
   say "Do something";
 };</code></pre>
<p>你也可以绑定多个机器，只需要用“,”分割机器名。</p>
<pre><code class="perl">
 task "mytask", "server1", "server2", "server3", sub {
   say "Do something";
 };</code></pre>
<p>你也可以用表达式指定一批机器。</p>
<pre><code class="perl">
 task "mytask", "server[1..3]", sub {
   say "Do something";
 };</code></pre>
<p>If you want, you can overwrite the servers with the <em>-H</em> command line parameter.</p>
<p>如果你想，你可以用 <em>-H</em> 参数覆盖掉 task 里定义好的服务器。</p>

<li><strong>创建指定机器组的任务。</strong></li>


<p>可以用<em>group</em>函数定义一个机器组。</p>
<pre><code class="perl">
 group "allserver" =&gt; "server[1..3]", "workstation[1..10]";
 
 task "mytask", group =&gt; "allserver", sub {
   say "Do something";
 };</code></pre>

</ul>

<li><strong>desc($description)</strong></li>


+<p>设置任务描述。</p>
<pre><code class="perl">
 desc "This is a task description of the following task";
 task "mytask", sub {
   say "Do something";
 }</code></pre>

<li><strong>group($name, @servers)</strong></li>


<p>如果你想一次在一组机器执行任务，可以用group函数定义一个机器组。非常方便 ;-)</p>
<pre><code class="perl">
 group "servergroup", "www1", "www2", "www3", "memcache01", "memcache02", "memcache03";</code></pre>
<p>你也可以直接使用表达式。</p>
<pre><code class="perl">
 group "servergroup", "www[1..3]", "memcache[01..03]";</code></pre>

<li><strong>batch($name, @tasks)</strong></li>


<p>用 batch 函数可以在批处理中调用任务。</p>
<pre><code class="perl">
 batch "name", "task1", "task2", "task3";</code></pre>
<p>你也可以在终端中用<em>-b</em>参数. <em>rex -b 批处理名称</em></p>

<li><strong>user($user)</strong></li>


+<p>设置ssh连接的用户。</p>

<li><strong>password($password)</strong></li>


<p>设置ssh连接密码(也可以是一个私钥文件路径)。</p>
 
<li><strong>auth(for =&gt; $entity, %data)</strong></li>


<p>这个函数可以对任务或服务器组设置或修改认证方式。当然修改的前提是需要先创建一个。</p>
<p>如果你想给某个服务器组设置特殊的登录信息，你需要先开启这个特性。</p>
<pre><code class="perl">
 use Rex -feature =&gt; 0.31; # activate setting auth for a group
  
 group frontends =&gt; "web[01..10]";
 group backends =&gt; "be[01..05]";
    
 auth for =&gt; "frontends" =&gt; 
            user =&gt; "root",
            password =&gt; "foobar";
   
 auth for =&gt; "backends" =&gt;
            user =&gt; "admin",
            private_key =&gt; "/path/to/id_rsa",
            public_key =&gt; "/path/to/id_rsa.pub",
            sudo =&gt; TRUE;
   
 task "prepare", group =&gt; ["frontends", "backends"], sub {
   # do something
 };
   
 auth for =&gt; "prepare" =&gt;
            user =&gt; "root";</code></pre>

<li><strong>port($port)</strong></li>


<p>设置ssh服务监听地址。</p>

<li><strong>sudo_password($password)</strong></li>


<p>设置sudo使用的密码。</p>

<li><strong>timeout($seconds)</strong></li>


<p>设置网络链接或者ssh服务的超时时间。</p>

<li><strong>max_connect_retries($count)</strong></li>


<p>设置连接失败重试次数。</p>

<li><strong>get_random($count, @chars)</strong></li>


<p>返回一个随机字符串。</p>
<pre><code class="perl">
 my $rnd = get_random(8, 'a' .. 'z');</code></pre>

<li><strong>do_task($task)</strong></li>


<p>在其他任务调用这个 $task。具体被执行的服务器就是在这个$task 中定义好的那些。</p>
<pre><code class="perl">
 task "task1", "server1", sub {
   say "Running on server1";
   do_task "task2";
 };
 
 task "task2", "server2", sub {
   say "Running on server2";
 };</code></pre>
<p>你也可以一次调用多个任务，用数组引用即可。</p>
<pre><code class="perl">
 do_task [ qw/task1 task2 task3/ ];</code></pre>

<li><strong>run_task($task_name, %option)</strong></li>


<p>指定机器上执行任务。</p>
<pre><code class="perl">
 my $return = run_task "taskname", on =&gt; "192.168.3.56";</code></pre>
<p>如果 server3 内存小于 100M 则在 server5 上执行某些命令。</p>
<pre><code class="perl">
 task "prepare", "server5", sub {
   my $free_mem = run_task "get_free_mem", on =&gt; "server3";
   if($free_mem &lt; 100) {
     say "Less than 100 MB free mem on server3";
     # create a new server instance on server5 to unload server3
   }
 };
   
 task "get_free_mem", sub {
    return memory-&gt;{free};
 };</code></pre>
<p>不指定具体机器则任务在本机执行。</p>
<pre><code class="perl">
 # this task will run on server5
 task "prepare", "server5", sub {
   # this will call task check_something. but this task will run on localhost.
   my $check = run_task "check_something";
 }
  
 task "check_something", "server4", sub {
   return "foo";
 };</code></pre>
<p>你可以添加自定义参数。</p>
<pre><code class="perl">
 task "prepare", "server5", sub {
  run_task "check_something", on =&gt; "foo", params =&gt; { param1 =&gt; "value1", param2 =&gt; "value2" };
 };</code></pre>

<li><strong>run_batch($batch_name, %option)</strong></li>


<p>Run a batch on a given host.</p>
<pre><code class="perl">
 my @return = run_batch "batchname", on =&gt; "192.168.3.56";</code></pre>
<p>It calls internally run_task, and passes it any option given.</p>

<li><strong>public_key($key)</strong></li>


<p>设置公钥。</p>

<li><strong>private_key($key)</strong></li>


<p>设置私钥。</p>

<li><strong>pass_auth</strong></li>


<p>如果需要用密码验证则需要使用<em>pass_auth</em>函数。</p>
<pre><code class="perl">
 user "root";
 password "root";
 
 pass_auth;</code></pre>

<li><strong>key_auth</strong></li>


<p>如果需要用公钥验证则需要使用 <em>key_auth</em>函数。</p>
<pre><code class="perl">
 user "bob";
 private_key "/home/bob/.ssh/id_rsa"; # passphrase-less key
 public_key "/home/bob/.ssh/id_rsa.pub";
 
 key_auth;</code></pre>

<li><strong>krb5_auth</strong></li>


<p>如果需要使用 kerberos 认证，需要使用 <em>krb5_auth</em> 函数。
这个认证机制仅在你使用 Net::OpenSSH 的时候才有效。</p>
<pre><code class="perl">
 set connection =&gt; "OpenSSH";
 user "root";
 krb5_auth;</code></pre>

<li><strong>parallelism($count)</strong></li>


<p>在指定机器上并行执行任务。 $count 指定线程数。</p>

<li><strong>set_distributor($distributor)</strong></li>


<p>设置任务代理模块。默认为 "Base"。</p>
<p>可能的值为: Base, Gearman</p>

<li><strong>template_function(sub { ... })</strong></li>


<p>这个函数主要用于设置模版处理。所以我们可以随意更改模版引擎。例如设置为 Template::Toolkit。</p>

<li><strong>logging</strong></li>


<p>这个函数可以设置 (R)?ex的日志记录方式。</p>
<ul>
<li><strong>记录到某个文件</strong></li>


<pre><code class="perl">
 logging to_file =&gt; "rex.log";</code></pre>

<li><strong>记录到 syslog</strong></li>


<pre><code class="perl">
 logging to_syslog =&gt; $facility;</code></pre>

</ul>

<li><strong>needs($package [, @tasks])</strong></li>


<p>With <em>needs</em> you can define dependencies between tasks. The "needed" tasks will be called with the same server configuration as the calling task.</p>
<p><em>needs</em> 用来定义任务间的依赖。被依赖的任务将在和调用自己的任务完全相同的服务器上执行。</>
<p>用了 <em>needs</em> 就不会执行 before, around 和 after 三个 hook 了。</p>
<ul>
<li><strong>Depend on all tasks in a given package.</strong></li>


<p>Depend on all tasks in the package MyPkg. All tasks will be called with the server <em>server1</em>.</p>
<pre><code class="perl">
 task "mytask", "server1", sub {
   needs MyPkg;
 };</code></pre>

<li><strong>Depend on a single task in a given package.</strong></li>


<p>Depend on the <em>uname</em> task in the package MyPkg. The <em>uname</em> task will be called with the server <em>server1</em>.</p>
<pre><code class="perl">
 task "mytask", "server1", sub {
   needs MyPkg "uname";
 };</code></pre>

<li><strong>To call tasks defined in the Rexfile from within a module</strong></li>


<pre><code class="perl">
 task "mytask", "server1", sub {
   needs main "uname";
 };</code></pre>

</ul>

<li><strong>include Module::Name</strong></li>


<p>不注册新任务情况下引入模块。</p>
<pre><code class="perl">
  include qw/
    Module::One
    Module::Two
  /;</code></pre>

<li><strong>environment($name =&gt; $code)</strong></li>


<p>定义环境变量。这样就可以在不同机器运行同一个任务，例如你可以在集成环境，测试环境和生产环境的服务器无差别执行一个任务。</p>
<pre><code class="perl">
 # define default user/password
 user "root";
 password "foobar";
 pass_auth;
    
 # define default frontend group containing only testwww01.
 group frontend =&gt; "testwww01";
    
 # define live environment, with different user/password 
 # and a frontend server group containing www01, www02 and www03.
 environment live =&gt; sub {
   user "root";
   password "livefoo";
   pass_auth;
     
   group frontend =&gt; "www01", "www02", "www03";
 };
    
 # define stage environment with default user and password. but with 
 # a own frontend group containing only stagewww01.
 environment stage =&gt; sub {
   group frontend =&gt; "stagewww01";
 };
   
 task "prepare", group =&gt; "frontend", sub {
    say run "hostname";
 };</code></pre>
<p>执行 <em>rex prepare</em> 将会在testwww01上执行任务。
执行<em>rex -E live prepare</em>将会在www01, www02, www03执行任务。
执行<em>rex -E stage prepare</em>将会在stagewww01执行任务。</p>
<p>你也可以在执行任务中得到当前environment。</p>
<pre><code class="perl">
 task "prepare", group =&gt; "frontend", sub {
   if(environment() eq "dev") {
     say "i'm in the dev environment";
   }
 };</code></pre>

<li><strong>LOCAL(&amp;)</strong></li>


<p>通过 LOCAL 函数可以在本地执行本已定义为远程机器的任务。</p>
<pre><code class="perl">
 task "mytask", "server1", "server2", sub {
    # this will call 'uptime' on the servers 'server1' and 'server2'
    say run "uptime";
    
    # this will call 'uptime' on the local machine.
    LOCAL {
      say run "uptime";
    };
 };</code></pre>

<li><strong>path(@path)</strong></li>


<p>设置命令执行路径。</p>
<pre><code class="perl">
 path "/bin", "/sbin", "/usr/bin", "/usr/sbin", "/usr/pkg/bin", "/usr/pkg/sbin";</code></pre>

<li><strong>set($key, $value)</strong></li>


<p>设置配置参数。这些值也可以直接在模版中使用。</p>
<pre><code class="perl">
 set database =&gt; "db01";
    
 task "prepare", sub {
   my $db = get "database";
 };</code></pre>
<p>然后在模版里可以</p>
<pre><code class="perl">
 DB: &lt;%= $::database %&gt;</code></pre>

<li><strong>get($key, $value)</strong></li>


<p>获取配置参数。</p>
<pre><code class="perl">
 set database =&gt; "db01";
    
 task "prepare", sub {
   my $db = get "database";
 };</code></pre>
<p>然后在模版里可以</p>
<pre><code class="perl">
 DB: &lt;%= $::database %&gt;</code></pre>

<li><strong>before($task =&gt; sub {})</strong></li>


<p>在任务执行前运行befor代码块。
(重复调用befor, 则每个sub都将加入到一个befor函数的list中)</p>
<p>注意: 必须定义代码运行后需要执行的任务</p>
<pre><code class="perl">
 before mytask =&gt; sub {
  my ($server) = @_;
  run "vzctl start vm$server";
 };</code></pre>

<li><strong>after($task =&gt; sub {})</strong></li>


<p>执行代码在人物完成后。
(重复调用则每个sub将会寄到到一个'after' 函数执行列表)</p>
<p>注意：必须定义需要执行的任务</p>
<pre><code class="perl">
 after mytask =&gt; sub {
  my ($server, $failed) = @_;
  if($failed) { say "Connection to $server failed."; }
   
  run "vzctl stop vm$server";
 };</code></pre>

<li><strong>around($task =&gt; sub {})</strong></li>


<p>都运行代码在任务执行前后。
(重复调用，将把每个sub都加入到一个'around' 函数执行列表)</p>
<p>注意：必须定义好需要执行的任务</p>
<pre><code class="perl">
 around mytask =&gt; sub {
  my ($server, $position) = @_;
  
  unless($position) {
    say "Before Task\n";
  }
  else {
    say "After Task\n";
  }
 };</code></pre>

<li><strong>logformat($format)</strong></li>


<p>可以使用下列参数来格式化日志记录。</p>
<p>%D - 以 yyyy-mm-dd HH:mm:ss 的格式添加当前时间</p>
<p>%h - 目标主机</p>
<p>%p - 进程pid</p>
<p>%l - 日志记录等级(INFO or DEBUG)</p>
<p>%s - 日志内容</p>
<p>默认为: [%D] %l - %s</p>

<li><strong>connection</strong></li>


<p>函数返回当前连接对象。</p>
<pre><code class="perl">
 task "foo", group =&gt; "baz", sub {
   say "Current Server: " . connection-&gt;server;
 };</code></pre>

<li><strong>cache</strong></li>


<p>This function returns the current cache object.</p>

<li><strong>profiler</strong></li>


<p>返回当前连接的分析器对象。</p>

<li><strong>report($switch, $type)</strong></li>


<p>This function will initialize the reporting.</p>
<pre><code class="perl">
 report -on =&gt; "YAML";</code></pre>

<li><strong>source_global_profile(0|1)</strong></li>


<p>如果设置了此项，每个run()命令在执行前必先执行<em>source /etc/profile</em>。</p>

<li><strong>last_command_output</strong></li>


<p>这个函数返回最后一次执行"run"命令的输出。</p>
<p>在debian系统举例返回<em>apt-get install foobar</em>命令输出。</p>
<pre><code class="perl">
 task "mytask", "myserver", sub {
   install "foobar";
   say last_command_output();
 };</code></pre>

<li><strong>case($compare, $option)</strong></li>


<p>此函数用于比较多个给出的条件。</p>
<pre><code class="perl">
 task "mytask", "myserver", sub {
   my $ntp_service = case operating_sytem, {
                 Debian  =&gt; "ntp",
                 default =&gt; "ntpd",
               };
    
   my $ntp_service = case operating_sytem, {
                 qr{debian}i =&gt; "ntp",
                 default    =&gt; "ntpd",
               };
    
   my $ntp_service = case operating_sytem, {
                 qr{debian}i =&gt; "ntp",
                 default    =&gt; sub { return "foo"; },
               };
 };</code></pre>

<li><strong>set_executor_for($type, $executor)</strong></li>


<p>设置执行器为特殊类型。通常用于 upload_and_run 等辅助函数的场合。</p>
<pre><code class="perl">
 set_executor_for perl =&gt; "/opt/local/bin/perl";</code></pre>

<li><strong>tmp_dir($tmp_dir)</strong></li>


<p>设置远程主机上存储零时文件的零时目录。</p>

<li><strong>inspect($varRef)</strong></li>


<p>这个函数打印变量内容到标准输出。</p>
<p>task "mytask", "myserver", sub {
  my $myvar = {
    name =&gt; "foo",
    sys  =&gt; "bar",
  };</p>
<pre><code class="perl">

  inspect $myvar;
};</code></pre>

<li><strong>sayformat($format)</strong></li>


<p>You can define the format of the say() function.</p>
<p>%D - The current date yyyy-mm-dd HH:mm:ss</p>
<p>%h - The target host</p>
<p>%p - The pid of the running process</p>
<p>%s - The Logstring</p>
<p>You can also define the following values:</p>
<p>default - the default behaviour.</p>
<p>asis - will print every single parameter in its own line. This is usefull if you want to print the output of a command.</p>

</ul>




