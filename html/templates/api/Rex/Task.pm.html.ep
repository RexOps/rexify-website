% layout 'default';
% title '';

% content_for header => begin
      <meta name="description" content="The Task Object. Typically you only need this class if you want to manipulate tasks after their initial creation.">
      <meta name="keywords" content="Rex, API, Documentation">
% end 


<!-- INDEX BEGIN -->
<div name="index">
<h1>目录</h1>

<ul>

        <li><a href="#description">摘要</a></li>
        <li><a href="#synopsis">例子</a></li>
        <li><a href="#methods">方法</a></li>
</ul>


</div>
<!-- INDEX END -->

<p>
</p>
<h2>摘要</h2>
<p>任务对象。通常只会在已经创建完后又要管理任务时才需要这个类。</p>
<p>
</p>

<h2>例子</h2>
<pre><code class="perl">
 use Rex::Task
 
  my $task = Rex::Task-&gt;new(name =&gt; "testtask");
  $task-&gt;set_server("remoteserver");
  $task-&gt;set_code(sub { say "Hello"; });
  $task-&gt;modify("no_ssh", 1);</code></pre>
<p>
</p>

<h2>方法</h2>
<ul>
<li><strong>new</strong></li>


<p>这是构造器。</p>
<pre><code class="perl">
  $task = Rex::Task-&gt;new(
    func =&gt; sub { some_code_here },
    server =&gt; [ @server ],
    desc =&gt; $description,
    no_ssh =&gt; $no_ssh,
    hidden =&gt; $hidden,
    auth =&gt; {
      user      =&gt; $user,
      password   =&gt; $password,
      private_key =&gt; $private_key,
      public_key  =&gt; $public_key,
    },
    before =&gt; [sub {}, sub {}, ...],
    after  =&gt; [sub {}, sub {}, ...],
    around =&gt; [sub {}, sub {}, ...],
    name =&gt; $task_name,
    executor =&gt; Rex::Interface::Executor-&gt;create,
  );</code></pre>

<li><strong>connection</strong></li>


<p>返回当前连接对象。</p>

<li><strong>executor</strong></li>


<p>返回当前执行对象。</p>

<li><strong>hidden</strong></li>


<p>如果任务是隐藏状态(在 <em>rex -T</em> 时不显示)，返回真。</p>

<li><strong>server</strong></li>


<p>返回即将执行该任务的服务器的数组引用。</p>

<li><strong>set_server(@server)</strong></li>


<p>设置任务在新服务器上执行。</p>

<li><strong>delete_server</strong></li>


<p>删除已经注册在该任务上的所有服务器。.</p>

<li><strong>current_server</strong></li>


<p>返回当前正在执行任务的这台服务器。</p>

<li><strong>desc</strong></li>


<p>返回任务描述。</p>

<li><strong>set_desc($description)</strong></li>


<p>设置任务描述。</p>

<li><strong>is_remote</strong></li>


<p>如果任务是远程执行，返回真。</p>

<li><strong>is_local</strong></li>


<p>如果任务是本地执行，返回真。</p>

<li><strong>is_http</strong></li>


<p>如果任务是通过http协议执行，返回真。</p>

<li><strong>want_connect</strong></li>


<p>如果任务将保持和远端的连接，返回真。</p>

<li><strong>get_connection_type</strong></li>


<p>猜测任务的连接类型，并返回。</p>
<p>可能值为SSH, Fake 和 Local。</p>
<p>SSH - 创建ssh连接到远程机器</p>
<p>Local -不创建任何连接，旨在本地执行</p>
<p>Fake - 不创建任何连接. 但通常你可以迭代远程主机列表但不建立连接.例如使用Sys::Virt或其他模块.</p>

<li><strong>modify($key, $value)</strong></li>


<p>此方法可以修改任务的属性。</p>

<li><strong>user</strong></li>


<p>返回任务执行使用的用户。</p>

<li><strong>set_user($user)</strong></li>


<p>设置任务执行使用的用户。</p>

<li><strong>password</strong></li>


<p>返回任务执行使用的密码。</p>

<li><strong>set_password($password)</strong></li>


<p>设置任务执行使用的密码。</p>

<li><strong>name</strong></li>


<p>返回任务名称。</p>

<li><strong>code</strong></li>


<p>返回任务代码。</p>

<li><strong>set_code(\&amp;code_ref)</strong></li>


<p>设置任务代码。</p>

<li><strong>run_hook($server, $hook)</strong></li>


<p>运行内部指定的hook。</p>

<li><strong>set_auth($key, $value)</strong></li>


<p>设置任务认证。</p>
<pre><code class="perl">
 $task-&gt;set_auth("user", "foo");
 $task-&gt;set_auth("password", "bar");</code></pre>

<li><strong>merge_auth($server)</strong></li>


<p>合并 $server 的认证信息到任务中。
人物本身的认证信息优先级更高。</p>

<li><strong>parallelism</strong></li>


<p>获取任务并发数。</p>

<li><strong>set_parallelism($count)</strong></li>


<p>设置任务并发数。</p>

<li><strong>connect($server)</strong></li>


<p>初始化到 $server 的连接。</p>

<li><strong>disconnect</strong></li>


<p>断开当前连接。</p>

<li><strong>run($server, %options)</strong></li>


<p>在 $server 上运行任务。</p>

<li><strong>exit_on_connect_fail()</strong></li>


<p>如果连接失败，返回真。</p>

</ul>




