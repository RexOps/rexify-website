% layout 'default';
% title 'Rex::Commands::File - Transparent File Manipulation';

% content_for header => begin
      <meta name="description" content="With this module you can manipulate files.">
      <meta name="keywords" content="Rex, API, Documentation">
% end 


<!-- INDEX BEGIN -->
<div name="index">
<h1>目录</h1>

<ul>

	<li><a href="#name">名称</a></li>
	<li><a href="#description">摘要</a></li>
	<li><a href="#synopsis">例子</a></li>
	<li><a href="#exported_functions">导出函数</a></li>
</ul>


</div>
<!-- INDEX END -->

<p>
</p>
<h2>名称</h2>
<p>Rex::Commands::File - Transparent File Manipulation</p>
<p>
</p>

<h2>摘要</h2>
<p>用该模块操纵文件。</p>
<p>
</p>

<h2>例子</h2>
<pre><code class="perl">
 task "read-passwd", "server01", sub {
   my $fh = file_read "/etc/passwd";
   for my $line = ($fh-&gt;read_all) {
     print $line;
   }
   $fh-&gt;close;
 };
 
 task "read-passwd2", "server01", sub {
   say cat "/etc/passwd";
 };</code></pre>
<pre><code class="perl">
 task "write-passwd", "server01", sub {
   my $fh = file_write "/etc/passwd";
   $fh-&gt;write("root:*:0:0:root user:/root:/bin/sh\n");
   $fh-&gt;close;
 };
 
 delete_lines_matching "/var/log/auth.log", matching =&gt; "root";
 delete_lines_matching "/var/log/auth.log", matching =&gt; qr{Failed};
 delete_lines_matching "/var/log/auth.log",
                matching =&gt; "root", qr{Failed}, "nobody";
 
 file "/path/on/the/remote/machine",
   source =&gt; "/path/on/local/machine";
 
 file "/path/on/the/remote/machine",
   content =&gt; "foo bar";
 
 file "/path/on/the/remote/machine",
   source =&gt; "/path/on/local/machine",
   owner  =&gt; "root",
   group  =&gt; "root",
   mode  =&gt; 400,
   on_change =&gt; sub { say "File was changed."; };</code></pre>
<p>
</p>

<h2>导出函数</h2>
<ul>
<li><strong>template($file, @params)</strong></li>


<p>解析模板然后返回内容。</p>
<pre><code class="perl">
 my $content = template("/files/templates/vhosts.tpl",
              name =&gt; "test.lan",
              webmaster =&gt; 'webmaster@test.lan');</code></pre>

<li><strong>file($file_name, %options)</strong></li>


<p>这个函数是 <em>install file</em> 命令的缩写。请使用这个函数来上传文件。</p>
<pre><code class="perl">
 task "prepare", "server1", "server2", sub {
   file "/file/on/remote/machine",
     source =&gt; "/file/on/local/machine";
 
   file "/etc/hosts",
     content =&gt; template("templates/etc/hosts.tpl"),
     owner  =&gt; "user",
     group  =&gt; "group",
     mode   =&gt; 700,
     on_change =&gt; sub { say "Something was changed." };
 
   file "/etc/motd",
     content =&gt; `fortune`;
 
   file "/etc/named.conf",
     content    =&gt; template("templates/etc/named.conf.tpl"),
     no_overwrite =&gt; TRUE;  # this file will not be overwritten if already exists.
 
   file "/etc/httpd/conf/httpd.conf",
     source =&gt; "/files/etc/httpd/conf/httpd.conf",
     on_change =&gt; sub { service httpd =&gt; "restart"; };
 
   file "/etc/named.d",
     ensure =&gt; "directory",  # this will create a directory
     owner  =&gt; "root",
     group  =&gt; "root";
 
   file "/etc/motd",
     ensure =&gt; "absent";   # this will remove the file or directory
 
 };</code></pre>
<p>如果 <em>source</em> 是相对路径，它会自动从你的 <em>Rexfile</em> 位置开始搜索。如果你还用了 Perl 包，搜索路径也就包括 这些 <em>.pm</em> 文件的路径。</p>
<p>这个函数支持一下 hooks：</p>
<ul>
<li><strong>before</strong></li>


<p>在全部事情之前被触发执行。执行的返回值会覆盖 file 函数调用的原始参数。</p>

<li><strong>before_change</strong></li>


<p>在新文件写入之前被触发执行。仅在 <em>content</em> 参数下有效。对于 <em>source</em> 参数，触发的是 upload 函数的 hook。</p>

<li><strong>after_change</strong></li>


<p>在新文件写入之后被触发执行。仅在 <em>content</em> 参数下有效。对于 <em>source</em> 参数，触发的是 upload 函数的 hook。</p>

<li><strong>after</strong></li>


<p>在 <a href="#file">file()</a> 函数执行到最后返回之前被触发执行。</p>

</ul>

<li><strong>file_write($file_name)</strong></li>


<p>这个函数打开一个文件以便写入(如果文件本已存在，内容会被 truncate 掉)。成功的话返回的是一个 Rex::FS::File 对象。</p>
<p>失败的话就死掉(die)。</p>
<pre><code class="perl">
 my $fh;
 eval {
   $fh = file_write("/etc/groups");
 };
 
 # catch an error
 if($@) {
   print "An error occured. $@.\n";
 }
 
 # work with the filehandle
 $fh-&gt;write("...");
 $fh-&gt;close;</code></pre>

<li><strong>file_append($file_name)</strong></li>

<li><strong>file_read($file_name)</strong></li>


<p>这个函数打开一个文件以便读取。成功的话返回的是一个 Rex::FS::File 对象。</p>
<p>失败的话就死掉(die)。</p>
<pre><code class="perl">
 my $fh;
 eval {
   $fh = read("/etc/groups");
 };
 
 # catch an error
 if($@) {
   print "An error occured. $@.\n";
 }
 
 # work with the filehandle
 my $content = $fh-&gt;read_all;
 $fh-&gt;close;</code></pre>

<li><strong>cat($file_name)</strong></li>


<p>这个函数返回 $file_name 的完整内容作为一个字符串。</p>
<pre><code class="perl">
 print cat "/etc/passwd";</code></pre>

<li><strong>delete_lines_matching($file, $regexp)</strong></li>


<p>删除 $file 中匹配到了 $regexp 的行。</p>
<pre><code class="perl">
 task "clean-logs", sub {
    delete_lines_matching "/var/log/auth.log" =&gt; "root";
 };</code></pre>

<li><strong>delete_lines_according_to($search, $file, @options)</strong></li>


<p>这是 <a href="#delete_lines_matching">delete_lines_matching()</a> 函数的继承者。这个函数还可以用上一个 on_change 的钩子。</p>
<p>它会搜索 $file 里的 $search 内容然后删除找到的行。如果有 on_change 钩子，那么在文件变动的时候就会执行这个钩子。</p>
<pre><code class="perl">
 task "cleanup", "server1", sub {
   delete_lines_according_to qr{^foo:}, "/etc/passwd",
    on_change =&gt; sub {
      say "removed user foo.";
    };
 };</code></pre>

<li><strong>append_if_no_such_line($file, $new_line, @regexp)</strong></li>


<p>如果 @regexp 中的正则都没匹配上，$new_line 的内容就追加进 $file 。如果不提供正则，那么对比整行内容，没有完全一致的话，这个行内容也会追加进 $file。</p>
<pre><code class="perl">
 task "add-group", sub {
   append_if_no_such_line "/etc/groups", "mygroup:*:100:myuser1,myuser2", on_change =&gt; sub { service sshd =&gt; "restart"; };
 };</code></pre>
<p>Since 0.42 you can use named parameters as well</p>
<pre><code class="perl">
 task "add-group", sub {
   append_if_no_such_line "/etc/groups",
     line  =&gt; "mygroup:*:100:myuser1,myuser2",
     regexp =&gt; qr{^mygroup},
     on_change =&gt; sub {
                say "file was changed, do something.";
              };
 
   append_if_no_such_line "/etc/groups",
     line  =&gt; "mygroup:*:100:myuser1,myuser2",
     regexp =&gt; [qr{^mygroup:}, qr{^ourgroup:}]; # this is an OR
 };</code></pre>

<li><strong>extract($file [, %options])</strong></li>


<p>这个函数解压文件，支持的格式包括： .box, .tar, .tar.gz, .tgz, .tar.Z, .tar.bz2, .tbz2, .zip, .gz, .bz2, .war, .jar。</p>
<pre><code class="perl">
 task prepare =&gt; sub {
   extract "/tmp/myfile.tar.gz",
    owner =&gt; "root",
    group =&gt; "root",
    to   =&gt; "/etc";
 
   extract "/tmp/foo.tgz",
    type =&gt; "tgz",
    mode =&gt; "g+rwX";
 };</code></pre>
<p>如果文件后缀被改了，你可以用 type=&gt; 参数做强制指定。(types 包括 tar, tgz, tbz, zip, gz, bz2)</p>

<li><strong>sed($search, $replace, $file)</strong></li>


<p>搜索文件中的字符串并替换掉。</p>
<pre><code class="perl">
 task sar =&gt; sub {
   # this will work line by line
   sed qr{search}, "replace", "/var/log/auth.log";
 
   # to use it in a multiline way
   sed qr{search}, "replace", "/var/log/auth.log",
    multiline =&gt; TRUE;
 };</code></pre>

</ul>




