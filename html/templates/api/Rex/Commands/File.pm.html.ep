% layout 'default';
% title 'Rex::Commands::File - Transparent File Manipulation';

% content_for header => begin
      <meta name="description" content="With this module you can manipulate files.">
      <meta name="keywords" content="Rex, API, Documentation">
% end 


<!-- INDEX BEGIN -->
<div name="index">
<h1>目录</h1>

<ul>

	<li><a href="#name">名称</a></li>
	<li><a href="#description">摘要</a></li>
	<li><a href="#synopsis">例子</a></li>
	<li><a href="#exported_functions">导出函数</a></li>
</ul>


</div>
<!-- INDEX END -->

<p>
</p>
<h2>名称</h2>
<p>Rex::Commands::File - Transparent File Manipulation</p>
<p>
</p>

<h2>摘要</h2>
<p>With this module you can manipulate files。</p>
<p>
</p>

<h2>例子</h2>
<pre><code class="perl">
 task "read-passwd", "server01", sub {
    my $fh = file_read "/etc/passwd";
    for my $line = ($fh-&gt;read_all) {
       print $line;
    }
    $fh-&gt;close;
 };</code></pre>
<pre><code class="perl">
 task "read-passwd2", "server01", sub {
    say cat "/etc/passwd";
 };
 
 
 task "write-passwd", "server01", sub {
    my $fh = file_write "/etc/passwd";
    $fh-&gt;write("root:*:0:0:root user:/root:/bin/sh\n");
    $fh-&gt;close;
 };
    
 delete_lines_matching "/var/log/auth.log", matching =&gt; "root";
 delete_lines_matching "/var/log/auth.log", matching =&gt; qr{Failed};
 delete_lines_matching "/var/log/auth.log", 
                        matching =&gt; "root", qr{Failed}, "nobody";
    
 file "/path/on/the/remote/machine",
    source =&gt; "/path/on/local/machine";
    
 file "/path/on/the/remote/machine",
    content =&gt; "foo bar";
    
 file "/path/on/the/remote/machine",
    source =&gt; "/path/on/local/machine",
    owner  =&gt; "root",
    group  =&gt; "root",
    mode   =&gt; 400,
    on_change =&gt; sub { say "File was changed."; };</code></pre>
<p>
</p>

<h2>导出函数</h2>
<ul>
<li><strong>template($file, @params)</strong></li>


<p>Parse a template and return the content。</p>
<pre><code class="perl">
 my $content = template("/files/templates/vhosts.tpl", 
                     name =&gt; "test.lan",
                     webmaster =&gt; 'webmaster@test.lan');</code></pre>

<li><strong>file($file_name, %options)</strong></li>


<p>This function is the successor of <em>install file</em>. Please use this function to upload files to you server。</p>
<pre><code class="perl">
 task "prepare", "server1", "server2", sub {
    file "/file/on/remote/machine",
       source =&gt; "/file/on/local/machine";
       
    file "/etc/hosts",
       content =&gt; template("templates/etc/hosts.tpl"),
       owner   =&gt; "user",
       group   =&gt; "group",
       mode    =&gt; 700,
       on_change =&gt; sub { say "Something was changed." };
        
    file "/etc/motd",
       content =&gt; `fortune`;
      
    file "/etc/httpd/conf/httpd.conf",
       source =&gt; "/files/etc/httpd/conf/httpd.conf",
       on_change =&gt; sub { service httpd =&gt; "restart"; };
 };</code></pre>
<p>If <em>source</em> is relative it will search from the location of your <em>Rexfile</em> or the <em>.pm</em> file if you use Perl packages。</p>

<li><strong>file_write($file_name)</strong></li>


<p>This function opens a file for writing (it will truncate the file if it already exists). It returns a Rex::FS::File object on success。</p>
<p>On failure it will die。</p>
<pre><code class="perl">
 my $fh;
 eval {
    $fh = file_write("/etc/groups");
 };
 
 # catch an error
 if($@) {
    print "An error occured. $@.\n";
 }
 
 # work with the filehandle
 $fh-&gt;write("...");
 $fh-&gt;close;</code></pre>

<li><strong>file_append($file_name)</strong></li>

<li><strong>file_read($file_name)</strong></li>


<p>This function opens a file for reading. It returns a Rex::FS::File object on success。</p>
<p>On failure it will die。</p>
<pre><code class="perl">
 my $fh;
 eval {
    $fh = read("/etc/groups");
 };
 
 # catch an error
 if($@) {
    print "An error occured. $@.\n";
 }
 
 # work with the filehandle
 my $content = $fh-&gt;read_all;
 $fh-&gt;close;</code></pre>

<li><strong>cat($file_name)</strong></li>


<p>This function returns the complete content of $file_name as a string。</p>
<pre><code class="perl">
 print cat "/etc/passwd";</code></pre>

<li><strong>delete_lines_matching($file, $regexp)</strong></li>


<p>Delete lines that match $regexp in $file。</p>
<pre><code class="perl">
 task "clean-logs", sub {
     delete_lines_matching "/var/log/auth.log" =&gt; "root";
 };</code></pre>

<li><strong>delete_lines_according_to($search, $file, @options)</strong></li>


<p>This is the successor of the <a href="#delete_lines_matching">delete_lines_matching()</a> function. This function also allows the usage of an on_change hook。</p>
<p>It will search for $search in $file and remove the found lines. If on_change hook is present it will execute this if the file was changed。</p>
<pre><code class="perl">
 task "cleanup", "server1", sub {
    delete_lines_according_to qr{^foo:}, "/etc/passwd",
      on_change =&gt; sub {
         say "removed user foo.";
      };
 };</code></pre>

<li><strong>append_if_no_such_line($file, $new_line, @regexp)</strong></li>


<p>Append $new_line to $file if none in @regexp is found. If no regexp is
supplied, the line is appended unless there is already an identical line
in $file。</p>
<pre><code class="perl">
 task "add-group", sub {
    append_if_no_such_line "/etc/groups", "mygroup:*:100:myuser1,myuser2", on_change =&gt; sub { service sshd =&gt; "restart"; };
 };</code></pre>
<p>Since 0.42 you can use named parameters as well</p>
<pre><code class="perl">
 task "add-group", sub {
    append_if_no_such_line "/etc/groups",
       line   =&gt; "mygroup:*:100:myuser1,myuser2",
       regexp =&gt; qr{^mygroup},
       on_change =&gt; sub {
                       say "file was changed, do something.";
                    };
          
    append_if_no_such_line "/etc/groups",
       line   =&gt; "mygroup:*:100:myuser1,myuser2",
       regexp =&gt; [qr{^mygroup:}, qr{^ourgroup:}]; # this is an OR
 };</code></pre>

<li><strong>extract($file [, %options])</strong></li>


<p>This function extracts a file. Supported formats are .box, .tar, .tar.gz, .tgz, .tar.Z, .tar.bz2, .tbz2, .zip, .gz, .bz2, .war, .jar。</p>
<pre><code class="perl">
 task prepare =&gt; sub {
    extract "/tmp/myfile.tar.gz",
      owner =&gt; "root",
      group =&gt; "root",
      to    =&gt; "/etc";</code></pre>
<pre><code class="perl">
    extract "/tmp/foo.tgz",
      type =&gt; "tgz",
      mode =&gt; "g+rwX";
 };
 
Can use the type=&gt; option if the file suffix has been changed. (types are tar, tgz, tbz, zip, gz, bz2)</code></pre>

<li><strong>sed($search, $replace, $file)</strong></li>


<p>Search some string in a file and replace it。</p>
<pre><code class="perl">
 task sar =&gt; sub {
    sed qr{search}, "replace", "/var/log/auth.log";
 };</code></pre>

</ul>




