% layout 'default';
% title 'Rex::Commands::Pkg - Install/Remove Software packages';

% content_for header => begin
      <meta name="description" content="With this module you can install packages and files.">
      <meta name="keywords" content="Rex, API, Documentation">
% end 


<!-- INDEX BEGIN -->
<div name="index">
<h1>目录</h1>

<ul>

	<li><a href="#name">名称</a></li>
	<li><a href="#description">摘要</a></li>
	<li><a href="#synopsis">例子</a></li>
	<li><a href="#exported_functions">导出函数</a></li>
</ul>


</div>
<!-- INDEX END -->

<p>
</p>
<h2>名称</h2>
<p>Rex::Commands::Pkg - Install/Remove Software packages</p>
<p>
</p>

<h2>摘要</h2>
<p>With this module you can install packages and files。</p>
<p>
</p>

<h2>例子</h2>
<pre><code class="perl">
 install file =&gt; "/etc/passwd", {
                     source =&gt; "/export/files/etc/passwd"
                 };
 
 install package =&gt; "perl";</code></pre>
<p>
</p>

<h2>导出函数</h2>
<ul>
<li><strong>install($type, $data, $options)</strong></li>


<p>The install function can install packages (for CentOS, OpenSuSE and Debian) and files。</p>
<ul>
<li><strong>installing a package (This is only supported on CentOS, OpenSuSE and Debian systems.)</strong></li>


<pre><code class="perl">
 task "prepare", "server01", sub {
    install package =&gt; "perl";
    
    # or if you have to install more packages.
    install package =&gt; [ 
                           "perl",
                           "ntp",
                           "dbus",
                           "hal",
                           "sudo",
                           "vim",
                       ];
 };</code></pre>

<li><strong>installing a file</strong></li>


<pre><code class="perl">

This is deprecated since 0.9. Please use L&lt;File&gt; I&lt;file&gt; instead.</code></pre>
<pre><code class="perl">
 task "prepare", "server01", sub {
    install file =&gt; "/etc/passwd", {
                        source =&gt; "/export/files/etc/passwd",
                        owner  =&gt; "root",
                        group  =&gt; "root",
                        mode   =&gt; 644,
                    };
 };</code></pre>

<li><strong>installing a file and do somthing if the file was changed.</strong></li>


<pre><code class="perl">
 task "prepare", "server01", sub {
    install file =&gt; "/etc/httpd/apache2.conf", {
                        source    =&gt; "/export/files/etc/httpd/apache2.conf",
                        owner     =&gt; "root",
                        group     =&gt; "root",
                        mode      =&gt; 644,
                        on_change =&gt; sub { say "File was modified!"; }
                    };
 };</code></pre>

<li><strong>installing a file from a template.</strong></li>


<pre><code class="perl">
 task "prepare", "server01", sub {
    install file =&gt; "/etc/httpd/apache2.tpl", {
                        source    =&gt; "/export/files/etc/httpd/apache2.conf",
                        owner     =&gt; "root",
                        group     =&gt; "root",
                        mode      =&gt; 644,
                        on_change =&gt; sub { say "File was modified!"; },
                        template  =&gt; {
                                        greeting =&gt; "hello",
                                        name     =&gt; "Ben",
                                     },
                    };
 };</code></pre>

</ul>

<li><strong>remove($type, $package, $options)</strong></li>


<p>This function will remove the given package from a system。</p>
<pre><code class="perl">
 task "cleanup", "server01", sub {
    remove package =&gt; "vim";
 };</code></pre>

<li><strong>update_system</strong></li>


<p>This function do a complete system update。</p>
<p>For example <em>apt-get upgrade</em> or <em>yum update</em>。</p>
<pre><code class="perl">
 task "update-system", "server1", sub {
    update_system;
 };</code></pre>

<li><strong>installed_packages</strong></li>


<p>This function returns all installed packages and their version。</p>
<pre><code class="perl">
 task "get-installed", "server1", sub {
    
     for my $pkg (installed_packages()) {
        say "name     : " . $pkg-&gt;{"name"};
        say "  version: " . $pkg-&gt;{"version"};
     }
     
 };</code></pre>

<li><strong>is_installed</strong></li>


<p>This function tests if $package is installed. Returns 1 if true. 0 if false。</p>
<pre><code class="perl">
 task "isinstalled", "server01", sub {
    if( is_installed("rex") ) {
       say "Rex is installed";
    }
    else {
       say "Rex is not installed";
    }
 };</code></pre>

<li><strong>update_package_db</strong></li>


<p>This function updates the local package database. For example, on CentOS it will execute <em>yum makecache</em>。</p>
<pre><code class="perl">
 task "update-pkg-db", "server1", "server2", sub {
    update_package_db;
    install package =&gt; "apache2";
 };</code></pre>

<li><strong>repository($action, %data)</strong></li>


<p>Add or remove a repository from the package manager。</p>
<p>For Debian: If you have no source repository, or if you don't want to add it, just remove the <em>source</em> parameter。</p>
<pre><code class="perl">
 task "add-repo", "server1", "server2", sub {
    repository "add" =&gt; "repository-name",
         url        =&gt; "http://rex.linux-files.org/debian/squeeze",
         distro     =&gt; "squeeze",
         repository =&gt; "rex",
         source     =&gt; 1;
 };</code></pre>
<p>For ALT Linux: If repository is unsigned, just remove the <em>sign_key</em> parameter。</p>
<pre><code class="perl">
 task "add-repo", "server1", "server2", sub {
    repository "add" =&gt; "altlinux-sisyphus",
         url        =&gt; "ftp://ftp.altlinux.org/pub/distributions/ALTLinux/Sisyphus",
         sign_key   =&gt; "alt",
         arch       =&gt; "noarch, x86_64",
         repository =&gt; "classic";
 };</code></pre>
<p>For CentOS, Mageia and SuSE only the name and the url are needed。</p>
<pre><code class="perl">
 task "add-repo", "server1", "server2", sub {
    repository add =&gt; "repository-name",
         url =&gt; '<a href="http://rex.linux-files.org/CentOS/">http://rex.linux-files.org/CentOS/</a>$releasever/rex/$basearch/';
     
 };</code></pre>
<p>To remove a repository just delete it with its name。</p>
<pre><code class="perl">
 task "rm-repo", "server1", sub {
    repository remove =&gt; "repository-name";
 };</code></pre>
<p>You can also use one call to repository to add repositories on multiple platforms:</p>
<pre><code class="perl">
 task "add-repo", "server1", "server2", sub {
   repository add =&gt; myrepo =&gt; {
      Ubuntu =&gt; {
         url =&gt; "http://foo.bar/repo",
         distro =&gt; "precise",
         repository =&gt; "foo",
      },
      Debian =&gt; {
         url =&gt; "http://foo.bar/repo",
         distro =&gt; "squeeze",
         repository =&gt; "foo",
      },
      CentOS =&gt; {
         url =&gt; "http://foo.bar/repo",
      },
   };
 };</code></pre>

<li><strong>package_provider_for $os =&gt; $type;</strong></li>


<p>To set an other package provider as the default, use this function。</p>
<pre><code class="perl">
 user "root";
     
 group "db" =&gt; "db[01..10]";
 package_provider_for SunOS =&gt; "blastwave";
    
 task "prepare", group =&gt; "db", sub {
     install package =&gt; "vim";
 };</code></pre>
<p>This example will install <em>vim</em> on every db server. If the server is a Solaris (SunOS) it will use the <em>blastwave</em> Repositories。</p>

</ul>




