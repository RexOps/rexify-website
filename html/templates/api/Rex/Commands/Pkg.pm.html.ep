% layout 'default';
% title 'Rex::Commands::Pkg - Install/Remove Software packages';

% content_for header => begin
      <meta name="description" content="With this module you can install packages and files.">
      <meta name="keywords" content="Rex, API, Documentation">
% end 


<!-- INDEX BEGIN -->
<div name="index">
<h1>TABLE OF CONTENTS</h1>

<ul>

	<li><a href="#name">NAME</a></li>
	<li><a href="#description">DESCRIPTION</a></li>
	<li><a href="#synopsis">SYNOPSIS</a></li>
	<li><a href="#exported_functions">EXPORTED FUNCTIONS</a></li>
</ul>


</div>
<!-- INDEX END -->

<p>
</p>
<h2>NAME</h2>
<p>Rex::Commands::Pkg - Install/Remove Software packages</p>
<p>
</p>

<h2>DESCRIPTION</h2>
<p>With this module you can install packages and files.</p>
<p>
</p>

<h2>SYNOPSIS</h2>
<pre><code class="perl">
 install file =&gt; &quot;/etc/passwd&quot;, {
                     source =&gt; &quot;/export/files/etc/passwd&quot;
                 };
 
 install package =&gt; &quot;perl&quot;;</code></pre>
<p>
</p>

<h2>EXPORTED FUNCTIONS</h2>
<ul>
<li><strong>install($type, $data, $options)</strong></li>


<p>The install function can install packages (for CentOS, OpenSuSE and Debian) and files.</p>
<ul>
<li><strong>installing a package (This is only supported on CentOS, OpenSuSE and Debian systems.)</strong></li>


<pre><code class="perl">
 task &quot;prepare&quot;, &quot;server01&quot;, sub {
    install package =&gt; &quot;perl&quot;;
    
    # or if you have to install more packages.
    install package =&gt; [ 
                           &quot;perl&quot;,
                           &quot;ntp&quot;,
                           &quot;dbus&quot;,
                           &quot;hal&quot;,
                           &quot;sudo&quot;,
                           &quot;vim&quot;,
                       ];
 };</code></pre>

<li><strong>installing a file</strong></li>


<pre><code class="perl">

This is deprecated since 0.9. Please use L&lt;File&gt; I&lt;file&gt; instead.</code></pre>
<pre><code class="perl">
 task &quot;prepare&quot;, &quot;server01&quot;, sub {
    install file =&gt; &quot;/etc/passwd&quot;, {
                        source =&gt; &quot;/export/files/etc/passwd&quot;,
                        owner  =&gt; &quot;root&quot;,
                        group  =&gt; &quot;root&quot;,
                        mode   =&gt; 644,
                    };
 };</code></pre>

<li><strong>installing a file and do somthing if the file was changed.</strong></li>


<pre><code class="perl">
 task &quot;prepare&quot;, &quot;server01&quot;, sub {
    install file =&gt; &quot;/etc/httpd/apache2.conf&quot;, {
                        source    =&gt; &quot;/export/files/etc/httpd/apache2.conf&quot;,
                        owner     =&gt; &quot;root&quot;,
                        group     =&gt; &quot;root&quot;,
                        mode      =&gt; 644,
                        on_change =&gt; sub { say &quot;File was modified!&quot;; }
                    };
 };</code></pre>

<li><strong>installing a file from a template.</strong></li>


<pre><code class="perl">
 task &quot;prepare&quot;, &quot;server01&quot;, sub {
    install file =&gt; &quot;/etc/httpd/apache2.tpl&quot;, {
                        source    =&gt; &quot;/export/files/etc/httpd/apache2.conf&quot;,
                        owner     =&gt; &quot;root&quot;,
                        group     =&gt; &quot;root&quot;,
                        mode      =&gt; 644,
                        on_change =&gt; sub { say &quot;File was modified!&quot;; },
                        template  =&gt; {
                                        greeting =&gt; &quot;hello&quot;,
                                        name     =&gt; &quot;Ben&quot;,
                                     },
                    };
 };</code></pre>

</ul>

<li><strong>remove($type, $package, $options)</strong></li>


<p>This function will remove the given package from a system.</p>
<pre><code class="perl">
 task &quot;cleanup&quot;, &quot;server01&quot;, sub {
    remove package =&gt; &quot;vim&quot;;
 };</code></pre>

<li><strong>update_system</strong></li>


<p>This function do a complete system update.</p>
<p>For example <em>apt-get upgrade</em> or <em>yum update</em>.</p>
<pre><code class="perl">
 task &quot;update-system&quot;, &quot;server1&quot;, sub {
    update_system;
 };</code></pre>

<li><strong>installed_packages</strong></li>


<p>This function returns all installed packages and their version.</p>
<pre><code class="perl">
 task &quot;get-installed&quot;, &quot;server1&quot;, sub {
    
     for my $pkg (installed_packages()) {
        say &quot;name     : &quot; . $pkg-&gt;{&quot;name&quot;};
        say &quot;  version: &quot; . $pkg-&gt;{&quot;version&quot;};
     }
     
 };</code></pre>

<li><strong>is_installed</strong></li>


<p>This function tests if $package is installed. Returns 1 if true. 0 if false.</p>
<pre><code class="perl">
 task &quot;isinstalled&quot;, &quot;server01&quot;, sub {
    if( is_installed(&quot;rex&quot;) ) {
       say &quot;Rex is installed&quot;;
    }
    else {
       say &quot;Rex is not installed&quot;;
    }
 };</code></pre>

<li><strong>update_package_db</strong></li>


<p>This function updates the local package database. For example, on CentOS it will execute <em>yum makecache</em>.</p>
<pre><code class="perl">
 task &quot;update-pkg-db&quot;, &quot;server1&quot;, &quot;server2&quot;, sub {
    update_package_db;
    install package =&gt; &quot;apache2&quot;;
 };</code></pre>

<li><strong>repository($action, %data)</strong></li>


<p>Add or remove a repository from the package manager.</p>
<p>For Debian: If you have no source repository, or if you don't want to add it, just remove the <em>source</em> parameter.</p>
<pre><code class="perl">
 task &quot;add-repo&quot;, &quot;server1&quot;, &quot;server2&quot;, sub {
    repository &quot;add&quot; =&gt; &quot;repository-name&quot;,
         url        =&gt; &quot;<a href="http://rex.linux-files.org/debian/squeeze&quot">http://rex.linux-files.org/debian/squeeze&quot</a>;,
         distro     =&gt; &quot;squeeze&quot;,
         repository =&gt; &quot;rex&quot;,
         source     =&gt; 1;
 };</code></pre>
<p>For ALT Linux: If repository is unsigned, just remove the <em>sign_key</em> parameter.</p>
<pre><code class="perl">
 task &quot;add-repo&quot;, &quot;server1&quot;, &quot;server2&quot;, sub {
    repository &quot;add&quot; =&gt; &quot;altlinux-sisyphus&quot;,
         url        =&gt; &quot;<a href="ftp://ftp.altlinux.org/pub/distributions/ALTLinux/Sisyphus&quot">ftp://ftp.altlinux.org/pub/distributions/ALTLinux/Sisyphus&quot</a>;,
         sign_key   =&gt; &quot;alt&quot;,
         arch       =&gt; &quot;noarch, x86_64&quot;,
         repository =&gt; &quot;classic&quot;;
 };</code></pre>
<p>For CentOS, Mageia and SuSE only the name and the url are needed.</p>
<pre><code class="perl">
 task &quot;add-repo&quot;, &quot;server1&quot;, &quot;server2&quot;, sub {
    repository add =&gt; &quot;repository-name&quot;,
         url =&gt; '<a href="http://rex.linux-files.org/CentOS/">http://rex.linux-files.org/CentOS/</a>$releasever/rex/$basearch/';
     
 };</code></pre>
<p>To remove a repository just delete it with its name.</p>
<pre><code class="perl">
 task &quot;rm-repo&quot;, &quot;server1&quot;, sub {
    repository remove =&gt; &quot;repository-name&quot;;
 };</code></pre>
<p>You can also use one call to repository to add repositories on multiple platforms:</p>
<pre><code class="perl">
 task &quot;add-repo&quot;, &quot;server1&quot;, &quot;server2&quot;, sub {
   repository add =&gt; myrepo =&gt; {
      Ubuntu =&gt; {
         url =&gt; &quot;<a href="http://foo.bar/repo&quot">http://foo.bar/repo&quot</a>;,
         distro =&gt; &quot;precise&quot;,
         repository =&gt; &quot;foo&quot;,
      },
      Debian =&gt; {
         url =&gt; &quot;<a href="http://foo.bar/repo&quot">http://foo.bar/repo&quot</a>;,
         distro =&gt; &quot;squeeze&quot;,
         repository =&gt; &quot;foo&quot;,
      },
      CentOS =&gt; {
         url =&gt; &quot;<a href="http://foo.bar/repo&quot">http://foo.bar/repo&quot</a>;,
      },
   };
 };</code></pre>

<li><strong>package_provider_for $os =&gt; $type;</strong></li>


<p>To set an other package provider as the default, use this function.</p>
<pre><code class="perl">
 user &quot;root&quot;;
     
 group &quot;db&quot; =&gt; &quot;db[01..10]&quot;;
 package_provider_for SunOS =&gt; &quot;blastwave&quot;;
    
 task &quot;prepare&quot;, group =&gt; &quot;db&quot;, sub {
     install package =&gt; &quot;vim&quot;;
 };</code></pre>
<p>This example will install <em>vim</em> on every db server. If the server is a Solaris (SunOS) it will use the <em>blastwave</em> Repositories.</p>

</ul>




