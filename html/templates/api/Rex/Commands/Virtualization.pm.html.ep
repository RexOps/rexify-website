% layout 'default';
% title 'Rex::Commands::Virtualization - Virtualization module';

% content_for header => begin
      <meta name="description" content="With this module you can manage your virtualization.">
      <meta name="keywords" content="Rex, API, Documentation">
% end 


<!-- INDEX BEGIN -->
<div name="index">
<h1>TABLE OF CONTENTS</h1>

<ul>

	<li><a href="#name">NAME</a></li>
	<li><a href="#description">DESCRIPTION</a></li>
	<li><a href="#synopsis">SYNOPSIS</a></li>
	<li><a href="#exported_functions">EXPORTED FUNCTIONS</a></li>
	<li><a href="#examples">EXAMPLES</a></li>
	<ul>

		<li><a href="#creating_a_virtual_machine">Creating a Virtual Machine</a></li>
		<li><a href="#start_stop_destroy">Start/Stop/Destroy</a></li>
		<li><a href="#delete">Delete</a></li>
		<li><a href="#modifying_a_vm">Modifying a VM</a></li>
		<li><a href="#request_information_of_a_vm">Request information of a vm</a></li>
		<li><a href="#request_info_from_the_underlying_hypervisor">Request info from the underlying hypervisor</a></li>
	</ul>

</ul>


</div>
<!-- INDEX END -->

<p>
</p>
<h2>NAME</h2>
<p>Rex::Commands::Virtualization - Virtualization module</p>
<p>
</p>

<h2>DESCRIPTION</h2>
<p>With this module you can manage your virtualization.</p>
<p>
</p>

<h2>SYNOPSIS</h2>
<pre><code class="perl">
 use Rex::Commands::Virtualization;
    
 set virtualization =&gt; &quot;LibVirt&quot;;
 set virtualization =&gt; &quot;VBox&quot;;
    
 use Data::Dumper;</code></pre>
<pre><code class="perl">
 print Dumper vm list =&gt; &quot;all&quot;;
 print Dumper vm list =&gt; &quot;running&quot;;
    
 vm destroy =&gt; &quot;vm01&quot;;
    
 vm delete =&gt; &quot;vm01&quot;; 
     
 vm start =&gt; &quot;vm01&quot;;
    
 vm shutdown =&gt; &quot;vm01&quot;;
    
 vm reboot =&gt; &quot;vm01&quot;;
    
 vm option =&gt; &quot;vm01&quot;,
          max_memory =&gt; 1024*1024,
          memory     =&gt; 512*1024;
              
 print Dumper vm info =&gt; &quot;vm01&quot;;
    
 # creating a vm on a kvm host
 vm create =&gt; &quot;vm01&quot;,
      storage     =&gt; [
         {   
            file   =&gt; &quot;/mnt/data/libvirt/images/vm01.img&quot;,
            dev    =&gt; &quot;vda&quot;,
         }   
      ];  
       
 print Dumper vm hypervisor =&gt; &quot;capabilities&quot;;</code></pre>
<p>
</p>

<h2>EXPORTED FUNCTIONS</h2>
<ul>
<li><strong>vm($action =&gt; $name, %option)</strong></li>


<p>This module exports only the <em>vm</em> function. You can manage everything with this function.</p>

</ul>
<p>
</p>

<h2>EXAMPLES</h2>
<p>
</p>
<h2><a name="creating_a_virtual_machine">Creating a Virtual Machine</a></h2>
<p>Create a (VirtualBox) VM named &quot;vm01&quot; with 512 MB ram and 1 cpu. One harddrive, 10 GB in size beeing a file on disk.
With a cdrom as an iso image and a natted network. The bootorder is set to &quot;dvd&quot;.</p>
<pre><code class="perl">
 vm create =&gt; &quot;vm01&quot;,
      storage     =&gt; [
         {   
            file   =&gt; &quot;/mnt/data/vbox/vm01.img&quot;,
            size   =&gt; &quot;10G&quot;,
         },
         {
            file =&gt; &quot;/mnt/iso/debian6.iso&quot;,
         }
      ],
      memory =&gt; 512,
      type =&gt; &quot;Linux26&quot;, 
      cpus =&gt; 1,
      boot =&gt; &quot;dvd&quot;;</code></pre>
<p>Create a (KVM) VM named &quot;vm01&quot; with 512 MB ram and 1 cpu. One harddrive, 10 GB in size beeing a file on disk.
With a cdrom as an iso image and a bridged network on the bridge virbr0. The Bootorder is set to &quot;cdrom&quot;.</p>
<pre><code class="perl">
 vm create =&gt; &quot;vm01&quot;,
      boot =&gt; &quot;cdrom&quot;,
      storage     =&gt; [
         {
            size   =&gt; &quot;10G&quot;,
            file   =&gt; &quot;/mnt/data/libvirt/images/vm01.img&quot;,
         },
                                                                                                                                        
         {
            file     =&gt; &quot;/mnt/data/iso/debian-6.0.2.1-amd64-netinst.iso&quot;,
         },
      ];</code></pre>
<p>This is the same as above, but with all options in use.</p>
<pre><code class="perl">
 vm create =&gt; &quot;vm01&quot;,
      memory   =&gt; 512*1024,
      cpus     =&gt; 1,      
      arch     =&gt; &quot;x86_64&quot;,
      boot     =&gt; &quot;cdrom&quot;,
      clock    =&gt; &quot;utc&quot;, 
      emulator =&gt; &quot;/usr/bin/qemu-system-x86_64&quot;,
      on_poweroff =&gt; &quot;destroy&quot;,
      on_reboot   =&gt; &quot;restart&quot;,
      on_crash    =&gt; &quot;restart&quot;,
      storage     =&gt; [
         {  type   =&gt; &quot;file&quot;,
            size   =&gt; &quot;10G&quot;,
            device =&gt; &quot;disk&quot;,
            file   =&gt; &quot;/mnt/data/libvirt/images/vm01.img&quot;,
            dev    =&gt; &quot;vda&quot;,
            bus    =&gt; &quot;virtio&quot;,
            address =&gt; {
               type     =&gt; &quot;pci&quot;,
               domain   =&gt; &quot;0x0000&quot;,
               bus      =&gt; &quot;0x00&quot;,
               slot     =&gt; &quot;0x05&quot;,
               function =&gt; &quot;0x0&quot;,
            },
         },
         {  type     =&gt; &quot;file&quot;,
            device   =&gt; &quot;cdrom&quot;,
            file     =&gt; &quot;/mnt/data/iso/debian-6.0.2.1-amd64-netinst.iso&quot;,
            dev      =&gt; &quot;hdc&quot;,
            bus      =&gt; &quot;ide&quot;,
            readonly =&gt; 1,
            address  =&gt; {                                                                                                               
               type       =&gt; &quot;drive&quot;,
               controller =&gt; 0,
               bus        =&gt; 1,
               unit       =&gt; 0,
            },
         },
      ],
      network =&gt; [
         {  type    =&gt; &quot;bridge&quot;,
            bridge  =&gt; &quot;virbr0&quot;,
            model   =&gt; &quot;virtio&quot;,
            address =&gt; {
               type     =&gt; &quot;pci&quot;,
               domain   =&gt; &quot;0x0000&quot;,
               bus      =&gt; &quot;0x00&quot;,
               slot     =&gt; &quot;0x03&quot;,
               function =&gt; &quot;0x0&quot;,
            },
         },
      ];</code></pre>
<p>Create a (Xen/HVM) VM named &quot;vm01&quot; with 512 MB ram and 1 cpu. One harddrive, cloned from an existing one.</p>
<pre><code class="perl">
 vm create =&gt; &quot;vm01&quot;,
      type   =&gt; &quot;hvm&quot;,
      storage     =&gt; [
         {
            file     =&gt; &quot;/mnt/data/libvirt/images/vm01.img&quot;,
            template =&gt; &quot;/mnt/data/libvirt/images/svn01.img&quot;,                                                                           
         },
      ];</code></pre>
<p>This is the same as above, but with all options in use.</p>
<pre><code class="perl">
 vm create =&gt; &quot;vm01&quot;,
      memory =&gt; 512*1024,
      cpus   =&gt; 1,
      boot   =&gt; &quot;hd&quot;,
      clock  =&gt; &quot;utc&quot;,
      on_poweroff =&gt; &quot;destroy&quot;,
      on_reboot   =&gt; &quot;restart&quot;,
      on_crash    =&gt; &quot;restart&quot;,
      storage     =&gt; [
         {  type   =&gt; &quot;file&quot;,
            size   =&gt; &quot;10G&quot;,
            device =&gt; &quot;disk&quot;,
            file   =&gt; &quot;/mnt/data/libvirt/images/vm01.img&quot;,
            dev    =&gt; &quot;hda&quot;,
            bus    =&gt; &quot;ide&quot;,
            template =&gt; &quot;/mnt/data/libvirt/images/svn01.img&quot;,                                                                           
         },
         {  type     =&gt; &quot;file&quot;,
            device   =&gt; &quot;cdrom&quot;,
            dev      =&gt; &quot;hdc&quot;,
            bus      =&gt; &quot;ide&quot;,
            readonly =&gt; 1,
         },
      ],
      network =&gt; [
         {  type    =&gt; &quot;bridge&quot;,
            bridge  =&gt; &quot;virbr0&quot;,
         },
      ],
      type =&gt; &quot;hvm&quot;;</code></pre>
<p>Create a (Xen/PVM) VM named &quot;vm01&quot; with 512 MB ram and 1 cpu. With one root partition (10GB in size) and one swap parition (1GB in size).</p>
<pre><code class="perl">
 vm create =&gt; &quot;vm01&quot;,
      type   =&gt; &quot;pvm&quot;,
      storage     =&gt; [
         {
            file    =&gt; &quot;/mnt/data/libvirt/images/domains/vm01/disk.img&quot;,
            dev     =&gt; &quot;xvda2&quot;,
            is_root =&gt; 1,                                                                                                               
         },
         {  
            file   =&gt; &quot;/mnt/data/libvirt/images/domains/vm01/swap.img&quot;,
            dev    =&gt; &quot;xvda1&quot;,
         },
      ];</code></pre>
<p>This is the same as above, but with all options in use.</p>
<pre><code class="perl">
 vm create =&gt; &quot;vm01&quot;,
      type   =&gt; &quot;pvm&quot;,
      memory =&gt; 512*1024,
      cpus   =&gt; 1,
      clock  =&gt; &quot;utc&quot;,
      on_poweroff =&gt; &quot;destroy&quot;,
      on_reboot   =&gt; &quot;restart&quot;,
      on_crash    =&gt; &quot;restart&quot;,
      os          =&gt; {
         type  =&gt; &quot;linux&quot;,
         kernel =&gt; &quot;/boot/vmlinuz-2.6.32-5-xen-amd64&quot;,
         initrd =&gt; &quot;/boot/initrd.img-2.6.32-5-xen-amd64&quot;,
         cmdline =&gt; &quot;root=/dev/xvda2 ro&quot;,
      },
      storage     =&gt; [
         {  type   =&gt; &quot;file&quot;,
            size   =&gt; &quot;10G&quot;,
            device =&gt; &quot;disk&quot;,
            file   =&gt; &quot;/mnt/data/libvirt/images/domains/vm01/disk.img&quot;,
            dev    =&gt; &quot;xvda2&quot;,
            bus    =&gt; &quot;xen&quot;,
            aio    =&gt; 1, # if you want to use aio
         },
         {  type   =&gt; &quot;file&quot;,
            size   =&gt; &quot;4G&quot;,
            device =&gt; &quot;disk&quot;,
            file   =&gt; &quot;/mnt/data/libvirt/images/domains/vm01/swap.img&quot;,
            dev    =&gt; &quot;xvda1&quot;,
            bus    =&gt; &quot;xen&quot;,
            aio    =&gt; 1, # if you want to use aio
         },
      ],
      network =&gt; [
         {  type    =&gt; &quot;bridge&quot;,
            bridge  =&gt; &quot;virbr0&quot;,
         },
      ];</code></pre>
<p>
</p>
<h2><a name="start_stop_destroy">Start/Stop/Destroy</a></h2>
<p>Start a stopped vm</p>
<pre><code class="perl">
 vm start =&gt; &quot;name&quot;;</code></pre>
<p>Stop a running vm (send shutdown signal)</p>
<pre><code class="perl">
 vm shutdown =&gt; &quot;name&quot;;</code></pre>
<p>Hard Stop a running vm</p>
<pre><code class="perl">
 vm destroy =&gt; &quot;name&quot;;</code></pre>
<p>
</p>
<h2><a name="delete">Delete</a></h2>
<pre><code class="perl">
 vm delete =&gt; &quot;name&quot;;</code></pre>
<p>
</p>
<h2><a name="modifying_a_vm">Modifying a VM</a></h2>
<p>Currently you can only modify the memory.</p>
<pre><code class="perl">
 vm option =&gt; &quot;name&quot;,
         max_memory =&gt; 1024*1024, # in bytes
         memory     =&gt; 512*1024;</code></pre>
<p>
</p>
<h2><a name="request_information_of_a_vm">Request information of a vm</a></h2>
<pre><code class="perl">
 vm info =&gt; &quot;name&quot;;</code></pre>
<p>
</p>
<h2><a name="request_info_from_the_underlying_hypervisor">Request info from the underlying hypervisor</a></h2>
<pre><code class="perl">
 vm hypervisor =&gt; &quot;capabilities&quot;;</code></pre>




