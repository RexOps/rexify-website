% layout 'default';
% title 'Rex::Commands::Virtualization - Virtualization module';

% content_for header => begin
      <meta name="description" content="With this module you can manage your virtualization.">
      <meta name="keywords" content="Rex, API, Documentation">
% end 


<!-- INDEX BEGIN -->
<div name="index">
<h1>目录</h1>

<ul>

	<li><a href="#name">名称</a></li>
	<li><a href="#description">摘要</a></li>
	<li><a href="#synopsis">例子</a></li>
	<li><a href="#exported_functions">导出函数</a></li>
	<li><a href="#examples">EXAMPLES</a></li>
	<ul>

		<li><a href="#creating_a_virtual_machine">Creating a Virtual Machine</a></li>
		<li><a href="#start_stop_destroy">Start/Stop/Destroy</a></li>
		<li><a href="#delete">Delete</a></li>
		<li><a href="#modifying_a_vm">Modifying a VM</a></li>
		<li><a href="#request_information_of_a_vm">Request information of a vm</a></li>
		<li><a href="#request_info_from_the_underlying_hypervisor">Request info from the underlying hypervisor</a></li>
	</ul>

</ul>


</div>
<!-- INDEX END -->

<p>
</p>
<h2>名称</h2>
<p>Rex::Commands::Virtualization - Virtualization module</p>
<p>
</p>

<h2>摘要</h2>
<p>With this module you can manage your virtualization。</p>
<p>
</p>

<h2>例子</h2>
<pre><code class="perl">
 use Rex::Commands::Virtualization;
    
 set virtualization =&gt; "LibVirt";
 set virtualization =&gt; "VBox";
    
 use Data::Dumper;</code></pre>
<pre><code class="perl">
 print Dumper vm list =&gt; "all";
 print Dumper vm list =&gt; "running";
    
 vm destroy =&gt; "vm01";
    
 vm delete =&gt; "vm01"; 
     
 vm start =&gt; "vm01";
    
 vm shutdown =&gt; "vm01";
    
 vm reboot =&gt; "vm01";
    
 vm option =&gt; "vm01",
          max_memory =&gt; 1024*1024,
          memory     =&gt; 512*1024;
              
 print Dumper vm info =&gt; "vm01";
    
 # creating a vm on a kvm host
 vm create =&gt; "vm01",
      storage     =&gt; [
         {   
            file   =&gt; "/mnt/data/libvirt/images/vm01.img",
            dev    =&gt; "vda",
         }   
      ];  
       
 print Dumper vm hypervisor =&gt; "capabilities";</code></pre>
<p>
</p>

<h2>导出函数</h2>
<ul>
<li><strong>vm($action =&gt; $name, %option)</strong></li>


<p>This module exports only the <em>vm</em> function. You can manage everything with this function。</p>

</ul>
<p>
</p>

<h2>EXAMPLES</h2>
<p>
</p>
<h2><a name="creating_a_virtual_machine">Creating a Virtual Machine</a></h2>
<p>Create a (VirtualBox) VM named "vm01" with 512 MB ram and 1 cpu. One harddrive, 10 GB in size beeing a file on disk.
With a cdrom as an iso image and a natted network. The bootorder is set to "dvd"。</p>
<pre><code class="perl">
 vm create =&gt; "vm01",
      storage     =&gt; [
         {   
            file   =&gt; "/mnt/data/vbox/vm01.img",
            size   =&gt; "10G",
         },
         {
            file =&gt; "/mnt/iso/debian6.iso",
         }
      ],
      memory =&gt; 512,
      type =&gt; "Linux26", 
      cpus =&gt; 1,
      boot =&gt; "dvd";</code></pre>
<p>Create a (KVM) VM named "vm01" with 512 MB ram and 1 cpu. One harddrive, 10 GB in size beeing a file on disk.
With a cdrom as an iso image and a bridged network on the bridge virbr0. The Bootorder is set to "cdrom"。</p>
<pre><code class="perl">
 vm create =&gt; "vm01",
      boot =&gt; "cdrom",
      storage     =&gt; [
         {
            size   =&gt; "10G",
            file   =&gt; "/mnt/data/libvirt/images/vm01.img",
         },
                                                                                                                                        
         {
            file     =&gt; "/mnt/data/iso/debian-6.0.2.1-amd64-netinst.iso",
         },
      ];</code></pre>
<p>This is the same as above, but with all options in use。</p>
<pre><code class="perl">
 vm create =&gt; "vm01",
      memory   =&gt; 512*1024,
      cpus     =&gt; 1,      
      arch     =&gt; "x86_64",
      boot     =&gt; "cdrom",
      clock    =&gt; "utc", 
      emulator =&gt; "/usr/bin/qemu-system-x86_64",
      on_poweroff =&gt; "destroy",
      on_reboot   =&gt; "restart",
      on_crash    =&gt; "restart",
      storage     =&gt; [
         {  type   =&gt; "file",
            size   =&gt; "10G",
            device =&gt; "disk",
            file   =&gt; "/mnt/data/libvirt/images/vm01.img",
            dev    =&gt; "vda",
            bus    =&gt; "virtio",
            address =&gt; {
               type     =&gt; "pci",
               domain   =&gt; "0x0000",
               bus      =&gt; "0x00",
               slot     =&gt; "0x05",
               function =&gt; "0x0",
            },
         },
         {  type     =&gt; "file",
            device   =&gt; "cdrom",
            file     =&gt; "/mnt/data/iso/debian-6.0.2.1-amd64-netinst.iso",
            dev      =&gt; "hdc",
            bus      =&gt; "ide",
            readonly =&gt; 1,
            address  =&gt; {                                                                                                               
               type       =&gt; "drive",
               controller =&gt; 0,
               bus        =&gt; 1,
               unit       =&gt; 0,
            },
         },
      ],
      network =&gt; [
         {  type    =&gt; "bridge",
            bridge  =&gt; "virbr0",
            model   =&gt; "virtio",
            address =&gt; {
               type     =&gt; "pci",
               domain   =&gt; "0x0000",
               bus      =&gt; "0x00",
               slot     =&gt; "0x03",
               function =&gt; "0x0",
            },
         },
      ];</code></pre>
<p>Create a (Xen/HVM) VM named "vm01" with 512 MB ram and 1 cpu. One harddrive, cloned from an existing one。</p>
<pre><code class="perl">
 vm create =&gt; "vm01",
      type   =&gt; "hvm",
      storage     =&gt; [
         {
            file     =&gt; "/mnt/data/libvirt/images/vm01.img",
            template =&gt; "/mnt/data/libvirt/images/svn01.img",                                                                           
         },
      ];</code></pre>
<p>This is the same as above, but with all options in use。</p>
<pre><code class="perl">
 vm create =&gt; "vm01",
      memory =&gt; 512*1024,
      cpus   =&gt; 1,
      boot   =&gt; "hd",
      clock  =&gt; "utc",
      on_poweroff =&gt; "destroy",
      on_reboot   =&gt; "restart",
      on_crash    =&gt; "restart",
      storage     =&gt; [
         {  type   =&gt; "file",
            size   =&gt; "10G",
            device =&gt; "disk",
            file   =&gt; "/mnt/data/libvirt/images/vm01.img",
            dev    =&gt; "hda",
            bus    =&gt; "ide",
            template =&gt; "/mnt/data/libvirt/images/svn01.img",                                                                           
         },
         {  type     =&gt; "file",
            device   =&gt; "cdrom",
            dev      =&gt; "hdc",
            bus      =&gt; "ide",
            readonly =&gt; 1,
         },
      ],
      network =&gt; [
         {  type    =&gt; "bridge",
            bridge  =&gt; "virbr0",
         },
      ],
      type =&gt; "hvm";</code></pre>
<p>Create a (Xen/PVM) VM named "vm01" with 512 MB ram and 1 cpu. With one root partition (10GB in size) and one swap parition (1GB in size)。</p>
<pre><code class="perl">
 vm create =&gt; "vm01",
      type   =&gt; "pvm",
      storage     =&gt; [
         {
            file    =&gt; "/mnt/data/libvirt/images/domains/vm01/disk.img",
            dev     =&gt; "xvda2",
            is_root =&gt; 1,                                                                                                               
         },
         {  
            file   =&gt; "/mnt/data/libvirt/images/domains/vm01/swap.img",
            dev    =&gt; "xvda1",
         },
      ];</code></pre>
<p>This is the same as above, but with all options in use。</p>
<pre><code class="perl">
 vm create =&gt; "vm01",
      type   =&gt; "pvm",
      memory =&gt; 512*1024,
      cpus   =&gt; 1,
      clock  =&gt; "utc",
      on_poweroff =&gt; "destroy",
      on_reboot   =&gt; "restart",
      on_crash    =&gt; "restart",
      os          =&gt; {
         type  =&gt; "linux",
         kernel =&gt; "/boot/vmlinuz-2.6.32-5-xen-amd64",
         initrd =&gt; "/boot/initrd.img-2.6.32-5-xen-amd64",
         cmdline =&gt; "root=/dev/xvda2 ro",
      },
      storage     =&gt; [
         {  type   =&gt; "file",
            size   =&gt; "10G",
            device =&gt; "disk",
            file   =&gt; "/mnt/data/libvirt/images/domains/vm01/disk.img",
            dev    =&gt; "xvda2",
            bus    =&gt; "xen",
            aio    =&gt; 1, # if you want to use aio
         },
         {  type   =&gt; "file",
            size   =&gt; "4G",
            device =&gt; "disk",
            file   =&gt; "/mnt/data/libvirt/images/domains/vm01/swap.img",
            dev    =&gt; "xvda1",
            bus    =&gt; "xen",
            aio    =&gt; 1, # if you want to use aio
         },
      ],
      network =&gt; [
         {  type    =&gt; "bridge",
            bridge  =&gt; "virbr0",
         },
      ];</code></pre>
<p>
</p>
<h2><a name="start_stop_destroy">Start/Stop/Destroy</a></h2>
<p>Start a stopped vm</p>
<pre><code class="perl">
 vm start =&gt; "name";</code></pre>
<p>Stop a running vm (send shutdown signal)</p>
<pre><code class="perl">
 vm shutdown =&gt; "name";</code></pre>
<p>Hard Stop a running vm</p>
<pre><code class="perl">
 vm destroy =&gt; "name";</code></pre>
<p>
</p>
<h2><a name="delete">Delete</a></h2>
<pre><code class="perl">
 vm delete =&gt; "name";</code></pre>
<p>
</p>
<h2><a name="modifying_a_vm">Modifying a VM</a></h2>
<p>Currently you can only modify the memory。</p>
<pre><code class="perl">
 vm option =&gt; "name",
         max_memory =&gt; 1024*1024, # in bytes
         memory     =&gt; 512*1024;</code></pre>
<p>
</p>
<h2><a name="request_information_of_a_vm">Request information of a vm</a></h2>
<pre><code class="perl">
 vm info =&gt; "name";</code></pre>
<p>
</p>
<h2><a name="request_info_from_the_underlying_hypervisor">Request info from the underlying hypervisor</a></h2>
<pre><code class="perl">
 vm hypervisor =&gt; "capabilities";</code></pre>




