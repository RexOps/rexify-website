% layout 'default';
% title 'Rex::Commands::Cloud - Cloud Management Commands';

% content_for header => begin
      <meta name="description" content="With this Module you can manage different Cloud services. Currently it supports Amazon EC2, Jiffybox and OpenStack.">
      <meta name="keywords" content="Rex, API, Documentation">
% end 


<!-- INDEX BEGIN -->
<div name="index">
<h1>目录</h1>

<ul>

	<li><a href="#name">名称</a></li>
	<li><a href="#description">摘要</a></li>
	<li><a href="#synopsis">例子</a></li>
	<li><a href="#exported_functions">导出函数</a></li>
</ul>


</div>
<!-- INDEX END -->

<p>
</p>
<h2>名称</h2>
<p>Rex::Commands::Cloud - Cloud Management Commands</p>
<p>
</p>

<h2>摘要</h2>
<p>用该模块可以管理不同的云服务。目前支持 Amazon EC2, Jiffybox 和 OpenStack。</p>
<p>
</p>

<h2>例子</h2>
<pre><code class="perl">
 use Rex::Commands::Cloud;
 
 cloud_service "Amazon";
 cloud_auth "your-access-key", "your-private-access-key";
 cloud_region "ec2.eu-west-1.amazonaws.com";
 
 task "list", sub {
   print Dumper cloud_instance_list;
   print Dumper cloud_volume_list;
 };
 
 task "create", sub {
   my $vol_id = cloud_volume create =&gt; { size =&gt; 1, zone =&gt; "eu-west-1a", };
 
   cloud_instance create =&gt; {
       image_id =&gt; "ami-xxxxxxx",
       name    =&gt; "test01",
       key    =&gt; "my-key",
       volume  =&gt; $vol_id,
       zone    =&gt; "eu-west-1a",
     };
 };
 
 task "destroy", sub {
   cloud_volume detach =&gt; "vol-xxxxxxx";
   cloud_volume delete =&gt; "vol-xxxxxxx";
 
   cloud_instance terminate =&gt; "i-xxxxxxx";
 };</code></pre>
<p>
</p>

<h2>导出函数</h2>
<ul>
<li><strong>cloud_service($cloud_service)</strong></li>


<p>定义使用哪种云服务。</p>
<ul>
<li><strong>Services</strong></li>

<ul>
<li><strong>Amazon</strong></li>

<li><strong>Jiffybox</strong></li>

<li><strong>OpenStack</strong></li>

</ul>

</ul>

<li><strong>cloud_auth($param1, $param2, ...)</strong></li>


<p>设置云服务的认证。</p>
<p>比如 Amazon 是这样：</p>
<pre><code class="perl">
 cloud_auth($access_key, $secret_access_key);</code></pre>
<p>JiffyBox 是这样：</p>
<pre><code class="perl">
 cloud_auth($auth_key);</code></pre>
<p>For OpenStack:</p>
<pre><code class="perl">
 cloud_auth(
  tenantName =&gt; 'tenant',
  username   =&gt; 'user',
  password   =&gt; 'password',
 );</code></pre>

<li><strong>cloud_region($region)</strong></li>


<p>设置云的区。</p>

<li><strong>cloud_instance_list</strong></li>


<p>获取云服务的全部实例。</p>
<pre><code class="perl">
 task "list", sub {
   for my $instance (cloud_instance_list()) {
     say "Arch  : " . $instance-&gt;{"architecture"};
     say "IP   : " . $instance-&gt;{"ip"};
     say "ID   : " . $instance-&gt;{"id"};
     say "State : " . $instance-&gt;{"state"};
   }
 };</code></pre>

<li><strong>cloud_volume_list</strong></li>


<p>获取云服务的全部卷。</p>
<pre><code class="perl">
 task "list-volumes", sub {
   for my $volume (cloud_volume_list()) {
     say "ID     : " . $volume-&gt;{"id"};
     say "Zone    : " . $volume-&gt;{"zone"};
     say "State   : " . $volume-&gt;{"state"};
     say "Attached : " . $volume-&gt;{"attached_to"};
   }
 };</code></pre>

<li><strong>cloud_network_list</strong></li>


<p>Get all networks of a cloud service.</p>
<pre><code class="perl">
 task "network-list", sub {
   for my $network (cloud_network_list()) {
     say "network  : " . $network-&gt;{network};
     say "name    : " . $network-&gt;{name};
     say "id     : " . $network-&gt;{id};
   }
 };</code></pre>

<li><strong>cloud_image_list</strong></li>


<p>Get a list of all available cloud images.</p>

<li><strong>get_cloud_instances_as_group</strong></li>


<p>获取云服务器所有在运行的实例列表。这可以用来做 <em>group</em> 定义。</p>
<pre><code class="perl">
 group fe  =&gt; "fe01", "fe02", "fe03";
 group ec2 =&gt; get_cloud_instances_as_group();</code></pre>

<li><strong>cloud_instance($action, $data)</strong></li>


<p>这个函数控制云主机行为。</p>

<li><strong>create</strong></li>


<p>创建新实例。</p>
<pre><code class="perl">
 cloud_instance create =&gt; {
     image_id =&gt; "ami-xxxxxx",
     key    =&gt; "ssh-key",
     name    =&gt; "fe-ec2-01",  # name is not necessary
     volume  =&gt; "vol-yyyyy",  # volume is not necessary
     zone    =&gt; "eu-west-1a",  # zone is not necessary
   };</code></pre>

<li><strong>start</strong></li>


<p>启动一个已存在的实例</p>
<pre><code class="perl">
 cloud_instance start =&gt; "instance-id";</code></pre>

<li><strong>stop</strong></li>


<p>停止一个已存在的实例</p>
<pre><code class="perl">
 cloud_instance stop =&gt; "instance-id";</code></pre>

<li><strong>terminate</strong></li>


<p>中断一个实例。这个操作会毁灭所有数据同时删除这个实例。</p>
<pre><code class="perl">
 cloud_instance terminate =&gt; "i-zzzzzzz";</code></pre>

<li><strong>get_cloud_regions</strong></li>


<p>返回所有的区作为一个数组。</p>

<li><strong>cloud_volume($action , $data)</strong></li>


<p>这个函数控制云存储卷的行为。</p>

<li><strong>create</strong></li>


<p>创建新存储卷。单位是 GB。</p>
<pre><code class="perl">
 task "create-vol", sub {
   my $vol_id = cloud_volume create =&gt; { size =&gt; 1, zone =&gt; "eu-west-1a", };
 };</code></pre>

<li><strong>detach</strong></li>


<p>分离实例的一个存储卷。</p>
<pre><code class="perl">
 task "detach-vol", sub {
   cloud_volume detach =&gt; "vol-xxxxxx";
 };</code></pre>

<li><strong>delete</strong></li>


<p>删除一个卷。数据都会丢失。</p>
<pre><code class="perl">
 task "delete-vol", sub {
   cloud_volume delete =&gt; "vol-xxxxxx";
 };</code></pre>

<li><strong>cloud_network</strong></li>

<li><strong>create</strong></li>


<p>Create a new network.</p>
<pre><code class="perl">
 task "create-net", sub {
   my $net_id = cloud_network create =&gt; { cidr =&gt; '192.168.0.0/24', name =&gt; "mynetwork", };
 };</code></pre>

<li><strong>delete</strong></li>


<p>Delete a network.</p>
<pre><code class="perl">
 task "delete-net", sub {
   cloud_network delete =&gt; '18a4ccf8-f14a-a10d-1af4-4ac7fee08a81';
 };</code></pre>

<li><strong>get_cloud_availability_zones</strong></li>


<p>如果存在的话，返回云服务所有可用的分区。</p>
<pre><code class="perl">
 task "get-zones", sub {
   print Dumper get_cloud_availability_zones;
 };</code></pre>

<li><strong>get_cloud_plans</strong></li>


<p>如果存在的话，获取所有可用的云 plans 信息。</p>

<li><strong>get_cloud_operating_systems</strong></li>


<p>如果存在的话，获取所有可用的云操作系统信息。</p>

</ul>




