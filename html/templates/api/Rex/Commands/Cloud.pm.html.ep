% layout 'default';
% title 'Rex::Commands::Cloud - Cloud Management Commands';

% content_for header => begin
      <meta name="description" content="With this Module you can manage different Cloud services. Currently it supports Amazon EC2 and Jiffybox.">
      <meta name="keywords" content="Rex, API, Documentation">
% end 


<!-- INDEX BEGIN -->
<div name="index">
<h1>TABLE OF CONTENTS</h1>

<ul>

	<li><a href="#name">NAME</a></li>
	<li><a href="#description">DESCRIPTION</a></li>
	<li><a href="#synopsis">SYNOPSIS</a></li>
	<li><a href="#exported_functions">EXPORTED FUNCTIONS</a></li>
</ul>


</div>
<!-- INDEX END -->

<p>
</p>
<h2>NAME</h2>
<p>Rex::Commands::Cloud - Cloud Management Commands</p>
<p>
</p>

<h2>DESCRIPTION</h2>
<p>With this Module you can manage different Cloud services. Currently it supports Amazon EC2 and Jiffybox.</p>
<p>
</p>

<h2>SYNOPSIS</h2>
<pre><code class="perl">
 use Rex::Commands::Cloud;
     
 cloud_service &quot;Amazon&quot;;
 cloud_auth &quot;your-access-key&quot;, &quot;your-private-access-key&quot;;
 cloud_region &quot;ec2.eu-west-1.amazonaws.com&quot;;
    
 task &quot;list&quot;, sub {
    print Dumper cloud_instance_list;
    print Dumper cloud_volume_list;
 };
      
 task &quot;create&quot;, sub {
    my $vol_id = cloud_volume create =&gt; { size =&gt; 1, zone =&gt; &quot;eu-west-1a&quot;, };
       
    cloud_instance create =&gt; {
          image_id =&gt; &quot;ami-xxxxxxx&quot;,
          name     =&gt; &quot;test01&quot;,
          key      =&gt; &quot;my-key&quot;,
          volume   =&gt; $vol_id,
          zone     =&gt; &quot;eu-west-1a&quot;,
       };
 };
     
 task &quot;destroy&quot;, sub {
    cloud_volume detach =&gt; &quot;vol-xxxxxxx&quot;;
    cloud_volume delete =&gt; &quot;vol-xxxxxxx&quot;;
       
    cloud_instance terminate =&gt; &quot;i-xxxxxxx&quot;;
 };</code></pre>
<p>
</p>

<h2>EXPORTED FUNCTIONS</h2>
<ul>
<li><strong>cloud_service($cloud_service)</strong></li>


<p>Define which cloud service to use.</p>
<ul>
<li><strong>Services</strong></li>

<ul>
<li><strong>Amazon</strong></li>

<li><strong>Jiffybox</strong></li>

</ul>

</ul>

<li><strong>cloud_auth($param1, $param2, ...)</strong></li>


<p>Set the authentication for the cloudservice.</p>
<p>For example for Amazon it is:</p>
<pre><code class="perl">
 cloud_auth($access_key, $secret_access_key);</code></pre>
<p>For JiffyBox:</p>
<pre><code class="perl">
 cloud_auth($auth_key);</code></pre>

<li><strong>cloud_region($region)</strong></li>


<p>Set the cloud region.</p>

<li><strong>cloud_instance_list</strong></li>


<p>Get all instances of a cloud service.</p>
<pre><code class="perl">
 task &quot;list&quot;, sub {
    for my $instance (cloud_instance_list()) {
       say &quot;Arch  : &quot; . $instance-&gt;{&quot;architecture&quot;};
       say &quot;IP    : &quot; . $instance-&gt;{&quot;ip&quot;};
       say &quot;ID    : &quot; . $instance-&gt;{&quot;id&quot;};
       say &quot;State : &quot; . $instance-&gt;{&quot;state&quot;};
    }
 };</code></pre>

<li><strong>cloud_volume_list</strong></li>


<p>Get all volumes of a cloud service.</p>
<pre><code class="perl">
 task &quot;list-volumes&quot;, sub {
    for my $volume (cloud_volume_list()) {
       say &quot;ID       : &quot; . $volume-&gt;{&quot;id&quot;};
       say &quot;Zone     : &quot; . $volume-&gt;{&quot;zone&quot;};
       say &quot;State    : &quot; . $volume-&gt;{&quot;state&quot;};
       say &quot;Attached : &quot; . $volume-&gt;{&quot;attached_to&quot;};
    }
 };</code></pre>

<li><strong>get_cloud_instances_as_group</strong></li>


<p>Get a list of all running instances of a cloud service. This can be used for a <em>group</em> definition.</p>
<pre><code class="perl">
 group fe  =&gt; &quot;fe01&quot;, &quot;fe02&quot;, &quot;fe03&quot;;
 group ec2 =&gt; get_cloud_instances_as_group();</code></pre>

<li><strong>cloud_instance($action, $data)</strong></li>


<p>This function controlls all aspects of a cloud instance.</p>

<li><strong>create</strong></li>


<p>Create a new instance.</p>
<pre><code class="perl">
 cloud_instance create =&gt; {
       image_id =&gt; &quot;ami-xxxxxx&quot;,
       key      =&gt; &quot;ssh-key&quot;,
       name     =&gt; &quot;fe-ec2-01&quot;,   # name is not necessary
       volume   =&gt; &quot;vol-yyyyy&quot;,   # volume is not necessary
       zone     =&gt; &quot;eu-west-1a&quot;,  # zone is not necessary
    };</code></pre>

<li><strong>start</strong></li>


<p>Start an existing instance</p>
<pre><code class="perl">
 cloud_instance start =&gt; &quot;instance-id&quot;;</code></pre>

<li><strong>stop</strong></li>


<p>Stop an existing instance</p>
<pre><code class="perl">
 cloud_instance stop =&gt; &quot;instance-id&quot;;</code></pre>

<li><strong>terminate</strong></li>


<p>Terminate an instance. This will destroy all data and remove the instance.</p>
<pre><code class="perl">
 cloud_instance terminate =&gt; &quot;i-zzzzzzz&quot;;</code></pre>

<li><strong>get_cloud_regions</strong></li>


<p>Returns all regions as an array.</p>

<li><strong>cloud_volume($action , $data)</strong></li>


<p>This function controlls all aspects of a cloud volume.</p>

<li><strong>create</strong></li>


<p>Create a new volume. Size is in Gigabytes.</p>
<pre><code class="perl">
 task &quot;create-vol&quot;, sub {
    my $vol_id = cloud_volume create =&gt; { size =&gt; 1, zone =&gt; &quot;eu-west-1a&quot;, };
 };</code></pre>

<li><strong>detach</strong></li>


<p>Detach a volume from an instance.</p>
<pre><code class="perl">
 task &quot;detach-vol&quot;, sub {
    cloud_volume detach =&gt; &quot;vol-xxxxxx&quot;;
 };</code></pre>

<li><strong>delete</strong></li>


<p>Delete a volume. This will destroy all data.</p>
<pre><code class="perl">
 task &quot;delete-vol&quot;, sub {
    cloud_volume delete =&gt; &quot;vol-xxxxxx&quot;;
 };</code></pre>

<li><strong>get_cloud_availability_zones</strong></li>


<p>Returns all availability zones of a cloud services. If available.</p>
<pre><code class="perl">
 task &quot;get-zones&quot;, sub {
    print Dumper get_cloud_availability_zones;
 };</code></pre>

<li><strong>get_cloud_plans</strong></li>


<p>Retrieve information of the available cloud plans. If supported.</p>

<li><strong>get_cloud_operating_systems</strong></li>


<p>Retrieve information of the available cloud plans. If supported.</p>

</ul>




