% layout 'default';
% title 'Rex::Commands::Cloud - Cloud Management Commands';

% content_for header => begin
      <meta name="description" content="With this Module you can manage different Cloud services. Currently it supports Amazon EC2 and Jiffybox.">
      <meta name="keywords" content="Rex, API, Documentation">
% end 


<!-- INDEX BEGIN -->
<div name="index">
<h1>目录</h1>

<ul>

	<li><a href="#name">名称</a></li>
	<li><a href="#description">摘要</a></li>
	<li><a href="#synopsis">例子</a></li>
	<li><a href="#exported_functions">导出函数</a></li>
</ul>


</div>
<!-- INDEX END -->

<p>
</p>
<h2>名称</h2>
<p>Rex::Commands::Cloud - Cloud Management Commands</p>
<p>
</p>

<h2>摘要</h2>
<p>With this Module you can manage different Cloud services. Currently it supports Amazon EC2 and Jiffybox。</p>
<p>
</p>

<h2>例子</h2>
<pre><code class="perl">
 use Rex::Commands::Cloud;
     
 cloud_service "Amazon";
 cloud_auth "your-access-key", "your-private-access-key";
 cloud_region "ec2.eu-west-1.amazonaws.com";
    
 task "list", sub {
    print Dumper cloud_instance_list;
    print Dumper cloud_volume_list;
 };
      
 task "create", sub {
    my $vol_id = cloud_volume create =&gt; { size =&gt; 1, zone =&gt; "eu-west-1a", };
       
    cloud_instance create =&gt; {
          image_id =&gt; "ami-xxxxxxx",
          name     =&gt; "test01",
          key      =&gt; "my-key",
          volume   =&gt; $vol_id,
          zone     =&gt; "eu-west-1a",
       };
 };
     
 task "destroy", sub {
    cloud_volume detach =&gt; "vol-xxxxxxx";
    cloud_volume delete =&gt; "vol-xxxxxxx";
       
    cloud_instance terminate =&gt; "i-xxxxxxx";
 };</code></pre>
<p>
</p>

<h2>导出函数</h2>
<ul>
<li><strong>cloud_service($cloud_service)</strong></li>


<p>Define which cloud service to use。</p>
<ul>
<li><strong>Services</strong></li>

<ul>
<li><strong>Amazon</strong></li>

<li><strong>Jiffybox</strong></li>

</ul>

</ul>

<li><strong>cloud_auth($param1, $param2, ...)</strong></li>


<p>Set the authentication for the cloudservice。</p>
<p>For example for Amazon it is:</p>
<pre><code class="perl">
 cloud_auth($access_key, $secret_access_key);</code></pre>
<p>For JiffyBox:</p>
<pre><code class="perl">
 cloud_auth($auth_key);</code></pre>

<li><strong>cloud_region($region)</strong></li>


<p>Set the cloud region。</p>

<li><strong>cloud_instance_list</strong></li>


<p>Get all instances of a cloud service。</p>
<pre><code class="perl">
 task "list", sub {
    for my $instance (cloud_instance_list()) {
       say "Arch  : " . $instance-&gt;{"architecture"};
       say "IP    : " . $instance-&gt;{"ip"};
       say "ID    : " . $instance-&gt;{"id"};
       say "State : " . $instance-&gt;{"state"};
    }
 };</code></pre>

<li><strong>cloud_volume_list</strong></li>


<p>Get all volumes of a cloud service。</p>
<pre><code class="perl">
 task "list-volumes", sub {
    for my $volume (cloud_volume_list()) {
       say "ID       : " . $volume-&gt;{"id"};
       say "Zone     : " . $volume-&gt;{"zone"};
       say "State    : " . $volume-&gt;{"state"};
       say "Attached : " . $volume-&gt;{"attached_to"};
    }
 };</code></pre>

<li><strong>get_cloud_instances_as_group</strong></li>


<p>Get a list of all running instances of a cloud service. This can be used for a <em>group</em> definition。</p>
<pre><code class="perl">
 group fe  =&gt; "fe01", "fe02", "fe03";
 group ec2 =&gt; get_cloud_instances_as_group();</code></pre>

<li><strong>cloud_instance($action, $data)</strong></li>


<p>This function controlls all aspects of a cloud instance。</p>

<li><strong>create</strong></li>


<p>Create a new instance。</p>
<pre><code class="perl">
 cloud_instance create =&gt; {
       image_id =&gt; "ami-xxxxxx",
       key      =&gt; "ssh-key",
       name     =&gt; "fe-ec2-01",   # name is not necessary
       volume   =&gt; "vol-yyyyy",   # volume is not necessary
       zone     =&gt; "eu-west-1a",  # zone is not necessary
    };</code></pre>

<li><strong>start</strong></li>


<p>Start an existing instance</p>
<pre><code class="perl">
 cloud_instance start =&gt; "instance-id";</code></pre>

<li><strong>stop</strong></li>


<p>Stop an existing instance</p>
<pre><code class="perl">
 cloud_instance stop =&gt; "instance-id";</code></pre>

<li><strong>terminate</strong></li>


<p>Terminate an instance. This will destroy all data and remove the instance。</p>
<pre><code class="perl">
 cloud_instance terminate =&gt; "i-zzzzzzz";</code></pre>

<li><strong>get_cloud_regions</strong></li>


<p>Returns all regions as an array。</p>

<li><strong>cloud_volume($action , $data)</strong></li>


<p>This function controlls all aspects of a cloud volume。</p>

<li><strong>create</strong></li>


<p>Create a new volume. Size is in Gigabytes。</p>
<pre><code class="perl">
 task "create-vol", sub {
    my $vol_id = cloud_volume create =&gt; { size =&gt; 1, zone =&gt; "eu-west-1a", };
 };</code></pre>

<li><strong>detach</strong></li>


<p>Detach a volume from an instance。</p>
<pre><code class="perl">
 task "detach-vol", sub {
    cloud_volume detach =&gt; "vol-xxxxxx";
 };</code></pre>

<li><strong>delete</strong></li>


<p>Delete a volume. This will destroy all data。</p>
<pre><code class="perl">
 task "delete-vol", sub {
    cloud_volume delete =&gt; "vol-xxxxxx";
 };</code></pre>

<li><strong>get_cloud_availability_zones</strong></li>


<p>Returns all availability zones of a cloud services. If available。</p>
<pre><code class="perl">
 task "get-zones", sub {
    print Dumper get_cloud_availability_zones;
 };</code></pre>

<li><strong>get_cloud_plans</strong></li>


<p>Retrieve information of the available cloud plans. If supported。</p>

<li><strong>get_cloud_operating_systems</strong></li>


<p>Retrieve information of the available cloud plans. If supported。</p>

</ul>




