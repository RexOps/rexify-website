% layout 'default';
% title 'Rex::Commands::Service - Manage System Services';

% content_for header => begin
      <meta name="description" content="With this module you can manage Linux services.">
      <meta name="keywords" content="Rex, API, Documentation">
% end 


<!-- INDEX BEGIN -->
<div name="index">
<h1>目录</h1>

<ul>

	<li><a href="#name">名称</a></li>
	<li><a href="#description">摘要</a></li>
	<li><a href="#synopsis">例子</a></li>
	<li><a href="#exported_functions">导出函数</a></li>
</ul>


</div>
<!-- INDEX END -->

<p>
</p>
<h2>名称</h2>
<p>Rex::Commands::Service - Manage System Services</p>
<p>
</p>

<h2>摘要</h2>
<p>用该模块管理 Linux 服务。</p>
<p>
</p>

<h2>例子</h2>
<pre><code class="perl">
 use Rex::Commands::Service
 
 service apache2 =&gt; "start";
 
 service apache2 =&gt; "stop";
 
 service apache2 =&gt; "restart";
 
 service apache2 =&gt; "status";
 
 service apache2 =&gt; "reload";
 
 service apache2 =&gt; "ensure", "started";
 
 service apache2 =&gt; "ensure", "stopped";</code></pre>
<p>
</p>

<h2>导出函数</h2>
<ul>
<li><strong>service($service, $action, [$option])</strong></li>


<p>service 函数接收两个参数。第一个是服务的名称，第二个是准备做的动作。</p>
<ul>
<li><strong>启动服务</strong></li>


<pre><code class="perl">
 task "start-service", "server01", sub {
   service apache2 =&gt; "start";
 };</code></pre>

<li><strong>停止服务</strong></li>


<pre><code class="perl">
 task "stop-service", "server01", sub {
   service apache2 =&gt; "stop";
 };</code></pre>

<li><strong>重启服务</strong></li>


<pre><code class="perl">
 task "restart-service", "server01", sub {
   service apache2 =&gt; "restart";
 };</code></pre>

<li><strong>检查服务状态</strong></li>


<pre><code class="perl">
 task "status-service", "server01", sub {
   if( service apache2 =&gt; "status" ) {
     say "Apache2 is running";
   }
   else {
     say "Apache2 is not running";
   }
 };</code></pre>

<li><strong>重载服务</strong></li>


<pre><code class="perl">
 task "reload-service", "server01", sub {
   service apache2 =&gt; "reload";
 };</code></pre>

<li><strong>确认服务在主机启动时会被启动</strong></li>


<pre><code class="perl">
 task "prepare", sub {
   service apache2 =&gt; "ensure", "started";
 };</code></pre>

<li><strong>确认服务在主机启动时不会被启动</strong></li>


<pre><code class="perl">
 task "prepare", sub {
   service apache2 =&gt; "ensure", "stopped";
 };</code></pre>
<p>This function supports the following hooks:</p>
<ul>
<li><strong>before_<em>action</em></strong></li>


<p>For example: before_start, before_stop, before_restart</p>
<p>This gets executed right before the service action.</p>

<li><strong>after_<em>action</em></strong></li>


<p>For example: after_start, after_stop, after_restart</p>
<p>This gets executed right after the service action.</p>

</ul>

</ul>

<li><strong>service_provider_for $os =&gt; $type;</strong></li>


<p>这个函数设置另一个服务提供器作为默认值。</p>
<pre><code class="perl">
 user "root";
 
 group "db" =&gt; "db[01..10]";
 service_provider_for SunOS =&gt; "svcadm";
 
 task "start", group =&gt; "db", sub {
    service ssh =&gt; "restart";
 };</code></pre>
<p>这是示例会用 svcadm 重启 <em>ssh</em> 服务(但只是在 SunOS上，其他系统上还是默认值)。</p>

</ul>




