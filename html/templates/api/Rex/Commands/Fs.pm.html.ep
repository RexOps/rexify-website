% layout 'default';
% title 'Rex::Commands::Fs - Filesystem commands';

% content_for header => begin
      <meta name="description" content="With this module you can do file system tasks like creating a directory, removing files, move files, and more.">
      <meta name="keywords" content="Rex, API, Documentation">
% end 


<!-- INDEX BEGIN -->
<div name="index">
<h1>目录</h1>

<ul>

	<li><a href="#name">名称</a></li>
	<li><a href="#description">摘要</a></li>
	<li><a href="#synopsis">例子</a></li>
	<li><a href="#exported_functions">导出函数</a></li>
</ul>


</div>
<!-- INDEX END -->

<p>
</p>
<h2>名称</h2>
<p>Rex::Commands::Fs - Filesystem commands</p>
<p>
</p>

<h2>摘要</h2>
<p>用该模块可以做一些文件系统任务，比如创建目录，删除文件，重命名等。</p>
<p>
</p>

<h2>例子</h2>
<pre><code class="perl">
 my @files = list_files "/etc";
 
 unlink("/tmp/file");
 
 rmdir("/tmp");
 mkdir("/tmp");
 
 my %stat = stat("/etc/passwd");
 
 my $link = readlink("/path/to/a/link");
 symlink("/source", "/dest");
 
 rename("oldname", "newname");
 
 chdir("/tmp");
 
 is_file("/etc/passwd");
 is_dir("/etc");
 is_writeable("/tmp");
 is_writable("/tmp");
    
 chmod 755, "/tmp";
 chown "user", "/tmp";
 chgrp "group", "/tmp";</code></pre>
<p>
</p>

<h2>导出函数</h2>
<ul>
<li><strong>list_files("/path");</strong></li>


<p>这个函数列出指定目录里的所有内容(文件，目录等)，并返回一个数组。</p>
<pre><code class="perl">
 task "ls-etc", "server01", sub {
    my @tmp_files = grep { /\.tmp$/ } list_files("/etc");
 };</code></pre>

<li><strong>ls($path)</strong></li>


<p><em>list_files</em>的别名。</p>

<li><strong>symlink($from, $to)</strong></li>


<p>这个函数创建一个从 $from 到 $to 的软连接。</p>
<pre><code class="perl">
 task "symlink", "server01", sub {
    symlink("/var/www/versions/1.0.0", "/var/www/html");
 };</code></pre>

<li><strong>ln($from, $to)</strong></li>


<p><em>symlink</em> 的别名。</p>

<li><strong>unlink($file)</strong></li>


<p>这个函数删除指定文件。</p>
<pre><code class="perl">
 task "unlink", "server01", sub {
    unlink("/tmp/testfile");
 };</code></pre>

<li><strong>rm($file)</strong></li>


<p>unlink 的别名。</p>

<li><strong>rmdir($dir)</strong></li>


<p>这个函数删除指定目录。</p>
<pre><code class="perl">
 task "rmdir", "server01", sub {
    rmdir("/tmp");
 };</code></pre>

<li><strong>mkdir($newdir)</strong></li>


<p>这个函数创建新目录。</p>
<pre><code class="perl">
 task "mkdir", "server01", sub {
    mkdir "/tmp";
         
    mkdir "/tmp",
      owner =&gt; "root",
      group =&gt; "root",
      mode =&gt; 1777;
 };</code></pre>

<li><strong>chown($owner, $file)</strong></li>


<p>更改文件或者目录的属主。</p>
<pre><code class="perl">
 chown "www-data", "/var/www/html";
     
 chown "www-data", "/var/www/html",
                        recursive =&gt; 1;</code></pre>

<li><strong>chgrp($group, $file)</strong></li>


<p>更改文件或者目录的属组。</p>
<pre><code class="perl">
 chgrp "nogroup", "/var/www/html";
    
 chgrp "nogroup", "/var/www/html",
                     recursive =&gt; 1;</code></pre>

<li><strong>chmod($mode, $file)</strong></li>


<p>更改文件或者目录的权限。</p>
<pre><code class="perl">
 chmod 755, "/var/www/html";
    
 chmod 755, "/var/www/html",
               recursive =&gt; 1;</code></pre>

<li><strong>stat($file)</strong></li>


<p>这个函数返回文件或者目录的下列信息构成的哈希。</p>
<ul>
<li><strong>mode</strong></li>

<li><strong>size</strong></li>

<li><strong>uid</strong></li>

<li><strong>gid</strong></li>

<li><strong>atime</strong></li>

<li><strong>mtime</strong></li>

</ul>
<pre><code class="perl">
 task "stat", "server01", sub {
    my %file_stat = stat("/etc/passwd");
 };</code></pre>

<li><strong>is_file($file)</strong></li>


<p>这个函数测试 $file 是否是文件，是返回 1，否返回 0。</p>
<pre><code class="perl">
 task "isfile", "server01", sub {
    if( is_file("/etc/passwd") ) {
       say "it is a file.";
    }
    else {
       say "hm, this is not a file.";
    }
 };</code></pre>

<li><strong>is_dir($dir)</strong></li>


<p>这个函数测试 $dir 是否是目录，是返回 1，否返回 0。</p>
<pre><code class="perl">
 task "isdir", "server01", sub {
    if( is_dir("/etc") ) {
       say "it is a directory.";
    }
    else {
       say "hm, this is not a directory.";
    }
 };</code></pre>

<li><strong>is_readable($file)</strong></li>


<p>这个函数测试 $file 是否可读，是返回 1，否返回 0。</p>
<pre><code class="perl">
 task "readable", "server01", sub {
    if( is_readable("/etc/passwd") ) {
       say "passwd is readable";
    }
    else {
       say "not readable.";
    }
 };</code></pre>

<li><strong>is_writable($file)</strong></li>


<p>这个函数测试 $file 是否可写，是返回 1，否返回 0。</p>
<pre><code class="perl">
 task "writable", "server01", sub {
    if( is_writable("/etc/passwd") ) {
       say "passwd is writable";
    }
    else {
       say "not writable.";
    }
 };</code></pre>

<li><strong>is_writeable($file)</strong></li>


<p><em>is_writable</em>的别名。</p>

<li><strong>readlink($link)</strong></li>


<p>这个函数返回 $link 软连接的目的地址。如果 $link 不是软连接，那函数失败(die)。</p>
<pre><code class="perl">
 task "islink", "server01", sub {
    my $link;
    eval {
       $link = readlink("/tmp/testlink");
    };
    
    say "this is a link" if($link);
 };</code></pre>

<li><strong>rename($old, $new)</strong></li>


<p>这个函数重命名 $old 成 $new，成功返回 1，失败返回 0。</p>
<pre><code class="perl">
 task "rename", "server01", sub {
    rename("/tmp/old", "/tmp/new");
 };</code></pre>

<li><strong>mv($old, $new)</strong></li>


<p>mv 是 <em>rename</em> 的别名。</p>

<li><strong>chdir($newdir)</strong></li>


<p>这个函数会切换当前工作目录到 $newdir 。这个函数目前只能在本机工作。</p>
<pre><code class="perl">
 task "chdir", "server01", sub {
    chdir("/tmp");
 };</code></pre>

<li><strong>cd($newdir)</strong></li>


<p><em>chdir</em> 的别名。</p>

<li><strong>df([$device])</strong></li>


<p>这个函数返回 <em>df</em> 输出映射的哈希引用。</p>
<pre><code class="perl">
 task "df", "server01", sub {
     my $df = df();
     my $df_on_sda1 = df("/dev/sda1");
 };</code></pre>

<li><strong>du($path)</strong></li>


<p>返回 $path 的磁盘使用情况。</p>
<pre><code class="perl">
 task "du", "server01", sub {
    say "size of /var/www: " . du("/var/www");
 };</code></pre>

<li><strong>cp($source, $destination)</strong></li>


<p>cp 会复制 $source 到 $destination (如果是可递归的 recursive)</p>
<pre><code class="perl">
 task "cp", "server01", sub {
     cp("/var/www", "/var/www.old");
 };</code></pre>

<li><strong>mount($device, $mount_point, @options)</strong></li>


<p>挂载设备。</p>
<pre><code class="perl">
 task "mount", "server01", sub {
    mount "/dev/sda5", "/tmp";
    mount "/dev/sda6", "/mnt/sda6",
               fs =&gt; "ext3",
               options =&gt; [qw/noatime async/];
    #
    # mount persistent with entry in /etc/fstab
      
    mount "/dev/sda6", "/mnt/sda6",
               fs =&gt; "ext3",
               options =&gt; [qw/noatime async/],
               persistent =&gt; TRUE;</code></pre>
<pre><code class="perl">
 };</code></pre>

<li><strong>umount($mount_point)</strong></li>


<p>卸载设备。</p>
<pre><code class="perl">
 task "umount", "server01", sub {
    umount "/tmp";
 };</code></pre>

<li><strong>glob($glob)</strong></li>


<pre><code class="perl">
 task "glob", "server1", sub {
    my @files_with_p = grep { is_file($_) } glob("/etc/p*");
 };</code></pre>

</ul>




