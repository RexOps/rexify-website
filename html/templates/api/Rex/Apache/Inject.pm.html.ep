% layout 'default';
% title '';

% content_for header => begin
      <meta name="description" content="">
      <meta name="keywords" content="Rex, API, Documentation">
% end 


<!-- INDEX BEGIN -->
<div name="index">
<h1>目录</h1>

<ul>

	<li><a href="#name">名称</a></li>
	<li><a href="#description">摘要</a></li>
	<li><a href="#getting_help">获取帮助</a></li>
	<li><a href="#dependencies">依赖</a></li>
	<li><a href="#synopsis">例子</a></li>
	<li><a href="#inject_methods">注入方法</a></li>
</ul>


</div>
<!-- INDEX END -->

<p>
</p>
<h2>名称</h2>
<p>Rex::Apache::Inject - Configuration Injection module for Rex::Apache::Deploy</p>
<p>
</p>

<h2>摘要</h2>
<p>这是一个向软件包 (*.tar.gz, *.tar.bz2, *.zip or *.war) 注入配置参数的 (R)?ex 模块。</p>
<p>你可以在 <a href="http://rexify.org/">http://rexify.org/</a>找到示例和具体做法。</p>
<p>
</p>

<h2>获取帮助</h2>
<ul>
<li><strong>网站: <a href="http://rexify.org/">http://rexify.org/</a></strong>

</li>
<li><strong>IRC: irc.freenode.net #rex</strong>

</li>
</ul>
<p>
</p>

<h2>依赖</h2>
<ul>
<li>
<p><em>Rex</em></p>
</li>
</ul>
<p>
</p>

<h2>例子</h2>
<pre><code class="perl">
 use Rex::Apache::Inject Properties;
     
 template_file &quot;inject.conf&quot;;
 template_search_for &quot;*.properties&quot;;
    
 desc &quot;Inject LIVE Configuration&quot;;
 task &quot;inject&quot;, sub {
    inject &quot;mypkg-1.0.1.tar.gz&quot;;
 };
    
 desc &quot;Inject LIVE Configuration&quot;;
 task &quot;inject&quot;, sub {
    inject &quot;mypkg-1.0.1.tar.gz&quot;,
            pre_pack_hook =&gt; sub {
                 say &quot;Pre Pack Hook&quot;;
            },
            post_pack_hook =&gt; {
                 say &quot;Post Pack Hook&quot;;
            };
 };</code></pre>
<p>
</p>

<h2>注入方法</h2>
<ul>
<li><strong>Properties</strong></li>


<p>这个方法是为类 Java 属性文件准备的。</p>
<pre><code class="perl">
 use Rex::Apache::Inject Properties;
    
 template_file &quot;inject.conf&quot;;
 template_search_for &quot;*.properties&quot;;
   
 task &quot;inject&quot;, sub {
     inject &quot;myapp.war&quot;;
 };</code></pre>
<p>This will search all files named <em>*.properties</em> inside of myapp.war and replace the parameters with these defined in <em>template_file</em>.</p>
<p>Format of the <em>template_file</em> is the same as the property files.</p>
<pre><code class="perl">
 my.property.one = Value1
 my.property.two = Value no two</code></pre>

<li><strong>Template</strong></li>


<p>这是一个特殊方法。它会在归档中搜索模板文件，然后用 <em>template_file</em> 定义的参数生成新的文件。</p>
<pre><code class="perl">
 use Rex::Apache::Inject Template;
     
 template_file &quot;inject.conf&quot;;
 template_search_for &quot;*.template.*&quot;;
   
 generate_real_name sub {
    my ($template_file_name) = @_;
    $template_file_name =~ s/\.template//;
    return $template_file_name;
 };
   
 task &quot;inject&quot;, sub {
     inject &quot;myapp.tar.gz&quot;;
 };</code></pre>
<p>这个会搜索 myapp.tar.gz 中名叫 <em>*.template.*</em> 的文件。然后根据 <em>generate_real_name</em> 生成新的文件。</p>
<p>示例：</p>
<pre><code class="perl">
 # Template Configuration file (inside myapp.tar.gz): config.template.php
 &lt;?php
    $db['host'] = &quot;@db.host@&quot;;
    $db['port'] = @db.port@;
    $db['user'] = &quot;@db.user@&quot;;
    $db['pass'] = &quot;@db.pass@&quot;;
 ?&gt;
     
 # Template file (specified by ,,template_file'')
 db.host = &quot;db01&quot;
 db.port = 3306
 db.user = &quot;myuser&quot;
 db.pass = &quot;mypass&quot;</code></pre>
<p> <em>inject</em> 操作会生成一个叫 <em>config.php</em> 的文件，内容如下：</p>
<pre><code class="perl">
 &lt;?php
    $db['host'] = &quot;db01&quot;;
    $db['port'] = 3306;
    $db['user'] = &quot;myuser&quot;;
    $db['pass'] = &quot;mypass&quot;;
 ?&gt;</code></pre>

<li><strong>YAML</strong></li>


<p>这个方法会解析归档中的 YAML 文件。当然前提是你安装了 <em>YAML</em> 模块。</p>
<pre><code class="perl">
 template_file &quot;live_config.yml&quot;;
 template_search_for &quot;application.yml&quot;;
     
 task &quot;inject&quot;, sub {
     inject &quot;myapp.tar.gz&quot;,
         pre_pack_hook =&gt; sub {
             run &quot;BUNDLE_PATH=vendor/bundle bundle install&quot;;
         };
 };</code></pre>
<p>这个会搜索 myapp.tar.gz 内的 <em>application.yml</em> 然后根据 <em>live_config.yml</em> 内定义的配置值做替换。 注意这里还运行了一个前置钩子跑 <em>bundle install</em> 。</p>

</ul>




