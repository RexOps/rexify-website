% layout 'default';
% title '';

% content_for header => begin
      <meta name="description" content="">
      <meta name="keywords" content="Rex, API, Documentation">
% end 


<!-- INDEX BEGIN -->
<div name="index">
<h1>目录</h1>

<ul>

	<li><a href="#name">名称</a></li>
	<li><a href="#description">摘要</a></li>
	<li><a href="#synopsis">例子</a></li>
	<li><a href="#exported_functions">导出函数</a></li>
</ul>


</div>
<!-- INDEX END -->

<p>
</p>
<h2>名称</h2>
<p>Rex::Apache::Build - Build your WebApp Package</p>
<p>
</p>

<h2>摘要</h2>
<p>通过该模块来准备好你的网页应用以便部署。</p>
<p>
</p>

<h2>例子</h2>
<pre><code class="perl">
 yui_path &quot;./yuicompressor-2.4.6.jar&quot;;
     
 get_version_from &quot;webapp/lib/MyApp.pm&quot;, qr{\$VERSION=([^;]+);};
     
 get_version_from &quot;webapp/index.php&quot;, qr{\$VERSION=([^;]+);};
     
 task &quot;build&quot;, sub {
    sprocketize;
    sprocketize &quot;app/assets/javascript/*.js&quot;,
      out =&gt; &quot;public/js/sprockets.js&quot;;
        
    coffee;
    coffee &quot;app/assets/coffee&quot;,
      out =&gt; &quot;public/js&quot;;
      
    sass;
    sass &quot;app/assets/stylesheets&quot;,
      out =&gt; &quot;public/stylesheets&quot;;
          
    yui;
    yui compress =&gt; &quot;file1.js&quot;, &quot;file2.js&quot;, &quot;file3.css&quot;; 
    yui compress =&gt; glob(&quot;public/javascript/*.js&quot;), glob(&quot;public/css/*.css&quot;);
         
    build;
        
    build &quot;webapp&quot;,
      source  =&gt; &quot;webapp/&quot;,
      version =&gt; &quot;1.0&quot;;
 };</code></pre>
<p>
</p>

<h2>导出函数</h2>
<ul>
<li><strong>yui_path($path_to_yui_compressor)</strong></li>


<p>这个函数设置 yui_compressor 的路径。如果给出的是一个相对路径，会自动从这个路径开始搜索 Rexfile。</p>

<li><strong>coffee_path($path_to_coffee)</strong></li>


<p>这个函数设置 coffee 编译器的路径。如果给出的是一个相对路径，会自动从这个路径开始搜索 Rexfile。</p>

<li><strong>sprocketize_path($path_to_sprocketize)</strong></li>


<p>这个函数设置 sprocketize 编译器的路径。如果给出的是一个相对路径，会自动从这个路径开始搜索 Rexfile。</p>

<li><strong>sass_path($path_to_sass)</strong></li>


<p>这个函数设置 sass 编译器的路径。如果给出的是一个相对路径，会自动从这个路径开始搜索 Rexfile。</p>

<li><strong>yui($action, @files)</strong></li>


<p>运行 yui 命令。</p>
<pre><code class="perl">
 task &quot;build&quot;, sub {
    # this will compress the given files
    yui compress =&gt; &quot;file1.js&quot;, &quot;file2.js&quot;, ...;
     
    # yui without any parameters will compress all files in public/javascripts
    yui;
 };</code></pre>

<li><strong>build([$name, %options])</strong></li>


<p>这个函数构建软件包。目前只支持 tar.gz 格式。</p>
<pre><code class="perl">
 # this will a package of the current directory named after the 
 # directory of the Rexfile and append the version provided by 
 # get_version_from() function
 # This function builds a tar.gz archive.
 task &quot;build&quot;, sub {
    build;
 };
    
 # this will build a package of the current directory named &quot;my-web-app&quot; and 
 # append the version provided by get_version_from() function.
 task &quot;build&quot;, sub {
    build &quot;my-web-app&quot;;
 };
     
 # this function will build a package of the directory &quot;html&quot;, name it 
 # &quot;my-web-app&quot; and append the version &quot;1.0&quot; to it.
 task &quot;build&quot;, sub {
    build &quot;my-web-app&quot;,
       path =&gt; &quot;html&quot;,
       version =&gt; &quot;1.0&quot;,
       exclude =&gt; [&quot;yuicompressor.jar&quot;, &quot;foobar.html&quot;],
       type =&gt; &quot;tgz&quot;;
 };</code></pre>

<li><strong>get_version_from($file, $regexp)</strong></li>


<p>获取文件版本。</p>

<li><strong>sprocketize($path_to_js_files, %option)</strong></li>


<p>以指定参数调用 sprocketize 命令。</p>
<pre><code class="perl">
 task &quot;build&quot;, sub {
    sprocketize &quot;app/javascript/*.js&quot;,
                  include    =&gt; [qw|app/javascripts vendor/sprockets/prototype/src|],
                  asset_root =&gt; &quot;public/js&quot;,
                  out        =&gt; &quot;public/js/sprockets.js&quot;;
     
    # to include more use an arrayRef
    sprocketize [&quot;app/javascript/*.js&quot;, &quot;app/javascript/po/*.js&quot;],
                  include    =&gt; [qw|app/javascripts vendor/sprockets/prototype/src|],
                  asset_root =&gt; &quot;public/js&quot;,
                  out        =&gt; &quot;public/js/sprockets.js&quot;;
         
    # if called without parameters
     
    sprocketize;
     
    # it will use the following defaults:
    # - javascript (sprockets) in assets/javascripts/*.js
    # - include  assets/javascripts
    # - asset_root public
    # - out public/${name_of_directory_where_Rexfile_lives}.js
 };</code></pre>

<li><strong>coffee($path, %options)</strong></li>


<p>编译 coffee 文件成 javascript 。</p>
<pre><code class="perl">
 task &quot;build&quot;, sub {
    # this command will build all files in &quot;coffeesrc&quot; and
    # write the output to &quot;javascripts&quot;
    coffee &quot;coffeesrc&quot;,
         out  =&gt; &quot;javascripts&quot;;
     
    # without parameters it will build all files in assets/coffee 
    # and write the output to public/javascripts.
    coffee;
 };</code></pre>

<li><strong>sass($input_dir, %option)</strong></li>


<p>编译 $input_dir 里的所有 sass 文件。</p>
<pre><code class="perl">
 task &quot;build&quot;, sub {
    # this command will compile all sass files from app/assets/stylesheets
    # and put the output into public/stylesheets.
    sass &quot;app/assets/stylesheets&quot;,
      out =&gt; &quot;public/stylesheets&quot;;
    
    # The default is to build all files in assets/sass and put the output
    # into public/css.
    sass;
 };</code></pre>

</ul>




