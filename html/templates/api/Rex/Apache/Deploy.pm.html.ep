% layout 'default';
% title '';

% content_for header => begin
      <meta name="description" content="">
      <meta name="keywords" content="Rex, API, Documentation">
% end 


<!-- INDEX BEGIN -->
<div name="index">
<h1>目录</h1>

<ul>

	<li><a href="#name">名称</a></li>
	<li><a href="#description">摘要</a></li>
	<li><a href="#getting_help">获取帮助</a></li>
	<li><a href="#dependencies">依赖</a></li>
	<li><a href="#synopsis">例子</a></li>
	<li><a href="#deploy_methods">部署方法</a></li>
	<ul>

		<li><a href="#switching_instances">切换实例</a></li>
	</ul>

</ul>


</div>
<!-- INDEX END -->

<p>
</p>
<h2>名称</h2>
<p>Rex::Apache::Deploy - Deploy module for Rex</p>
<p>
</p>

<h2>摘要</h2>
<p>这是一个简化 Tomcat，Perl，Rails，PHP 或者其他语言的部署的 (R)?ex 模块。</p>
<p>你可以在 <a href="http://rexify.org/">http://rexify.org/</a> 上找到例子和具体做法。</p>
<p>
</p>

<h2>获取帮助</h2>
<ul>
<li><strong>网站: <a href="http://rexify.org/">http://rexify.org/</a></strong>

</li>
<li><strong>IRC: irc.freenode.net #rex</strong>

</li>
</ul>
<p>
</p>

<h2>依赖</h2>
<ul>
<li>
<p><em>Rex</em></p>
</li>
<li>
<p><em>YAML</em></p>
</li>
<li>
<p><a href="/LWP/Simple.html">LWP::Simple 文档</a></p>
</li>
<li>
<p>zip</p>
</li>
<li>
<p>unzip</p>
</li>
<li>
<p>tar</p>
</li>
<li>
<p>bzip2</p>
</li>
<li>
<p>wget</p>
</li>
</ul>
<p>如果你使用的是windows，你可以在 <a href="http://sourceforge.net/projects/gnuwin32/files/">http://sourceforge.net/projects/gnuwin32/files/</a> 上找到他们的安装包。
不要忘记安装完成后把可执行目录添加到你的 %PATH% 环境变量。</p>
<p>
</p>

<h2>例子</h2>
<pre><code class="perl">
 use Rex::Apache::Deploy Symlink;
   
 deploy_to &quot;/var/deploy&quot;;
   
 document_root &quot;/var/www/myhost/htdocs&quot;;
   
 generate_deploy_directory sub {
    my ($file) = @_;
    $file =~ m/-(\d+\.\d+\.\d+)\.tar\.gz$/;
    return $1;
 };
   
 desc &quot;Deploy to Apache&quot;;
 task &quot;deploy&quot;, group =&gt; &quot;frontend&quot;, sub {
    deploy &quot;mypkg-1.0.1.tar.gz&quot;;
 };</code></pre>
<p>
</p>

<h2>部署方法</h2>
<ul>
<li><strong>软连接</strong></li>


<p>这个方法会上传你的包 (*.tar.gz, *.tar.bz2 or *.zip) 到所有的服务器，然后解压到你指定的 <em>deploy_to</em> 目录下的 <em>generate_deploy_directory</em> 子目录里。然后从 <em>document_root</em> 创建软连接到这个新目录。</p>
<pre><code class="perl">
 deploy_to &quot;/var/deploy&quot;;
 document_root &quot;/var/www&quot;;
 generate_deploy_directory sub { return &quot;1.0&quot;; };</code></pre>
<p>这样就会上传文件到 <em>/var/deploy/1.0</em> 然后创建软连接 <em>/var/www</em> 到 <em>/var/deploy/1.0</em>。</p>

<li><strong>Tomcat</strong></li>


<p>这个方法用来做 Tomcat 部署。你需要在自己的 Tomcat 服务器上运行 Tomcat 管理应用。这个方法会上传你的包到 <em>/tmp/some-random-chars.war</em>，然后调用 Tomcat 管理器卸载当前环境然后部署新的 war 包。完成后再删除上传的临时文件。</p>
<pre><code class="perl">
 context_path &quot;/myapp&quot;;
     
 task &quot;deploy&quot;, group =&gt; &quot;middleware&quot;, sub {
     deploy &quot;myapp.war&quot;,
         username    =&gt; &quot;manager-user&quot;,
         password    =&gt; &quot;manager-password&quot;,
         port        =&gt; 8080,
         manager_url =&gt;  &quot;/manager&quot;;
 };</code></pre>
<p>这个会部署 <em>myapp.war</em> 到一个监听了 <em>8080</em> 端口的tomcat，具体的监听器应用则是 <em><a href="http://the-server:8080/manager">http://the-server:8080/manager</a></em>。</p>

</ul>
<p>
</p>
<h2><a name="switching_instances">切换实例</a></h2>
<p>如果你有多个 Tomcat 实例，你可以用 <em>jk</em> 命令管理它。</p>
<pre><code class="perl">
 jk disable =&gt; 'name';
 jk enable  =&gt; 'name';</code></pre>




